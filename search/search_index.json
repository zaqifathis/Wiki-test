{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BIMserver - an open-source Building Information Model server","text":"<p>Welcome to the Opensource BIMserver wiki!</p> <p>This wiki has grown over the years and contains older and newer information. Some of the older information might be obsolete for the current version. An overhaul of the wiki might be in order. Don't hesitate to report things that seem plain wrong to you.</p>"},{"location":"#trying-and-testing","title":"Trying and testing","text":"<p>If you just want to try and test the BIMserver, dive right into the wiki section \"Get Started\" and the Quick Guide.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>The Opensource BIMserver community has been actively developing since 2013. We are happy to accept contributions as there still are many developments going on. To contribute, you may:</p> <ol> <li>Fork the opensource BIMserver repo, create a new branch, make your changes, write tests if applicable, and do a pull request.</li> <li>Review our issues queue.</li> <li>Create a new issue, if you think you found one that is not yet covered.</li> </ol>"},{"location":"#using-and-extending","title":"Using and extending","text":"<p>BIMserver has a flexible architecture and various interfaces and is meant to be integrated with your software to act as an IFC backend. You may:</p> <ol> <li>Write your own plugin or service.</li> <li>Use the clients or write your own client to have your application talk with a BIMserver instance.</li> <li>Embed the Opensource BIMserver in your application.</li> </ol>"},{"location":"#support","title":"Support","text":"<p>If you need help, first check out this Wiki, the FAQ list and the issue tracker. You can also contact the developers/contributors regarding the issue you encountered. You can reach the maintainers via bimserver@opensourcebim.org.</p>"},{"location":"#some-notes","title":"Some notes:","text":"<ul> <li>If you see a message about 'heap size' in your error log, increase your heap size memory.</li> </ul>"},{"location":"#license","title":"License:","text":"<p>Open Source BIMserver is licensed under the AGPL-3.0. See the LICENSE and the respective wiki page for more details.</p>"},{"location":"BIMserver-1.5---Developers/","title":"BIMserver 1.5 Developers","text":"<p>BIMserver 1.5 setup in Eclipse will be different than for 1.4, the current GIT master branch will be the 1.5 release.</p> <ul> <li>Some projects will always generate an error in Eclipse, this is because at the moment there is a maven-plugin which has been written for maven 2, but we use maven 3. You can safely ignore this error (it's not a compile error).</li> </ul> <pre><code>Plugin execution not covered by lifecycle configuration: org.codehaus.mojo:build-helper-maven-plugin:1.10:add-source (execution: add-source, phase: generate-sources)\n\n</code></pre> <p>Note: Please let us know if you are a Maven expert and know how to fix this</p>"},{"location":"BIMserver-1.5---Developers/#maven-update-project","title":"Maven | Update Project...","text":"<p>This will criple the eclipse project configuration. After doing maven update, you will have to manually fix a few dependencies.</p>"},{"location":"BIMserver-1.5---Developers/#pluginbase-project","title":"PluginBase project","text":"<p>Change the \"Java Build Path | Source\", remove the \"PluginBase/genclasses\" altogether, and clear the \"Excluded\" part of \"PluginBase/generated\"</p> <p></p> <p>Then go to \"Libraries\" and add a class-folder, \"PluginBase/genclasses\".</p> <p></p> <p>Note: Please let us know if you know how to make this work automatically</p>"},{"location":"BIMserver-Database-Migration/","title":"BIMserver Database Migration","text":"<p>BIMserver has a built-in schema migration system. This system works by keeping track of the current schema version in the database and also in the sofware itself. On startup, both version are compared and the server either starts up without a problem (<code>RUNNING</code>), goes into (<code>MIGRATION_REQUIRED</code>) mode when a migration is required, or to (<code>MIGRATION_IMPOSSIBLE</code>).</p> <p>The next few sections describe the database upgrade system, but please make sure to read the last chapter as well because that describes when the database migration system DOES NOT WORK</p>"},{"location":"BIMserver-Database-Migration/#migration_impossible","title":"<code>MIGRATION_IMPOSSIBLE</code>","text":"<p>Reverse migrations are never possible, so when your database for example has version 15 and the software has version 14, BIMserver will always go into <code>MIGRATION_IMPOSSIBLE</code> state. The only solution for this is to download the right version of the software.</p>"},{"location":"BIMserver-Database-Migration/#migration_required","title":"<code>MIGRATION_REQUIRED</code>","text":"<p>BIMserver goes into this state when the database version is lower than the software version of the schema. BIMserver will not automatically migrate the database, because you should always (manually) MAKE A BACKUP OF YOUR DATABASE FIRST. When you have made a backup, you can either:</p> <ul> <li>Type \"migrate\" into the console, this only works when you actually have a console into BIMserver (local dev)</li> <li>Use the API call AdminInterface.migrateDatabase</li> <li>For BIMservers running on an application server (only Tomcat is tested), you can also add a parameter to your context called \"autoMigrate\". This will actually try to auto-migrate your database on startup when necessary. This is not recommended.</li> </ul>"},{"location":"BIMserver-Database-Migration/#how-it-works","title":"How it works","text":"<p>For every database schema change in BIMserver we keep track of what has changed in migration steps. Each new schema version has a file called \"StepXXXX\", where XXXX is the schema version. Example: https://github.com/opensourceBIM/BIMserver/blob/master/BimServer/src/org/bimserver/database/migrations/steps/Step0038.java.</p> <p>It might be obvious or not, but once a database migration has been published (by releasing a version of BIMserver), you cannot change a migration anymore without breaking the upgrade-system. The only way to revert changes is by adding another migration that reverses your earlier changes.</p>"},{"location":"BIMserver-Database-Migration/#no-migration-possible","title":"No migration possible","text":"<p>There are a few reasons why database upgrades do not always work:</p> <ul> <li>Not all database changes can be described in the migration steps. A migration step can only change the schema (add a class, add an attribute, remove an attribute etc...). Some database changes do not change the schema, but the way the data is stored in the key-value store.</li> <li>Not all database changes are cleanly documented in migration steps. For example, a while back we migrated from IFC4 to IFC4Add2. This was done by changing Step0013. When a (already published) migration step is changed, this breaks the migration system.</li> <li>Some changes are not really schema changes, for example between 1.5.122 and 1.5.123 we changed how vertices are stored (float-&gt;double). Since vertices are stored in a byte[], the type (in the sense of the schema) was unchanged. This could actually be reflected in a database migration step by doing a data-conversion (but leaving the database schema the same).</li> </ul>"},{"location":"BIMserver-Database-Migration/#current-policy","title":"Current policy","text":"<p>Major releases should be migratable to newer versions within that major release. For example 1.4 should be upgradable to 1.4.1 without problems. Major releases are usually not upgradable to new major releases (1.4 to 1.5 for example is not possible).</p> <p>Important: The current 1.5 releases are still marked \"Pre-release\", the description says \"Developers release\". As long as a major version number is not officially released (1.5), we put in no effort whatsoever to keep migations working. As soon as 1.5 is officially released, we intend to support that version for a while and only do bug fixes that don't require incompatible database changes.</p> <p>Could we put more effort into making sure databases are upgradable? Yes. At the moment though, we think fixing bugs and adding features etcetera is more important.</p>"},{"location":"BIMserver-Database-Migration/#what-to-do-if-you-want-to-upgrade-but-no-upgrade-path-is-available","title":"What to do if you want to upgrade, but no upgrade-path is available?","text":"<p>So for example when you are running an unreleased 1.5 BIMserver and you want to upgrade to a newer (unreleased) version.</p> <p>Depending on your situation, you might get away with the following:</p> <ol> <li>Keep your old BIMserver running</li> <li>Setup a second BIMserver with the version you would like to run</li> <li>Write a piece of code that connects with both BIMservers</li> <li>Query the first BIMserver for the information you want to migrate (for example Projects, Users, etc...)</li> <li>Use the BIMserver API of the second BIMserver to insert that data</li> </ol> <p>This solution has worked for a few people migration 1.3 to 1.4. You might get a headstart by studying https://github.com/opensourceBIM/BIMserver/blob/master/BimServer/src/org/bimserver/BimServerImporter.java. Which is non-maintained code, but at least it still compiles...</p> <p>Problems you might run into with this approach is the fact that different versions of BIMserver have different API calls/layout, so a statically linked API implementation might be problematic.</p> <p>The most important part of most BIMserver databases would be the models. Since sometimes bugs exist in older version of BIMserver, you might want to consider getting the original IFC file (stored in \"{homedir}/incoming\") and checking those into your new server instead of serializing those models in the original server.</p> <p>Important note: Using migration methods like these will never result in the same Object IDs. You should assume all ID's to be different. There is no way to do this kind of an import and force the ID's to stay the same, at least not with the current design of the database layer in BIMserver. This can obviously be problematic for databases that need to refer to for example BIMserver projects, users or revisions. For this reason we are (slowly) introducing UUIDs for certain objects.</p>"},{"location":"BIMserver-Database-Migration/#serviceinterfaceimportdata","title":"ServiceInterface.importData","text":"<p>This method is not maintained (internally it uses the earlier mentioned BimServerImporter), it's basically an implementation of the above, only it runs on the target BIMserver. It might still work. Just give it the address of the old BIMserver + username + password. The 4th parameter should point to a locally available copy (or direct link) to the \"{homedir}/incoming\" folder of your old BIMserver.</p>"},{"location":"BIMserver-survey-2020/","title":"BIMserver survey 2020","text":"<p>Dear bimserver.org community member</p> <p>In the past decade the BIM server grew from a small Open Source research initiative into a more sophisticated Open Source framework with a rich ecosystem of accompanying tools and plugins. We realize that beside research organizations also commercial organizations are interested in the use of the BIM Server. This justifies the question how we want to proceed with the BIM Server in a way that it\u2019s available for both the research projects as Open Source, but also as a technical stable system and fully supported that is sustainable from a commercial and financial point of view (i.e. dual license). We hope that you will contribute to our short questionnaire and tell us about the experiences of you / your organization with BIM server and its accompanying tools.  To get a better understanding about the nature of the community, their opinions and ideas about bimserver.org, we have composed a short survey. </p> <p>This should not take more than 10 min. of your time.</p> <p>https://forms.gle/57AC7mgwH6NxoWpr8</p> <p>We appreciated your cooperation very much, thank you in advance!  Thank you to the many of the core community (Ruben, Leon, Thomas, Lars, Helga, Klaus) for their support on compiling this survey!</p> <p>Jakob Beetz (RWTH Aachen University) Pieter Pauwels (TU Eindhoven) Wim van der Poel (TNO) Rob Roef (TNO)</p>"},{"location":"BIMsurfer-Serializers/","title":"Current serializers (used by BIMvie.ws and BIMsurfer)","text":""},{"location":"BIMsurfer-Serializers/#binary-serializers","title":"Binary serializers","text":"<p>These serializers write the geometry in a binary format that in most cases can easily be send to GPU's.</p> <p>The source code can be found in the BinarySerializers plugin repository and should be quite self explanatory.</p> <p>Because at this time, JavaScript is not able to load binary data in a streaming way, there is also a messaging implementation. This implementation sends the geometry in batches via WebSocket: BinaryGeometryMessagingSerializer.java.</p> <p>These serializers are used by BIMvie.ws and BIMsurfer. The non-messaging serializers are not used any more and have been removed.</p>"},{"location":"BIMsurfer-Serializers/#json-serializers","title":"JSON serializers","text":"<p>To be updated</p>"},{"location":"BIMsurfer-Serializers/#older-serializers","title":"Older serializers","text":""},{"location":"BIMsurfer-Serializers/#scenejsshellserializer","title":"SceneJsShellSerializer","text":"<p>This serializes the semantic information of the IFC model in JSON format. This contains no geometry. It's used by the sidebar showing the tree etc...</p> <p>Example files:</p> <ul> <li>Test 1 Shell.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%201%20Shell.json.md- Test 2 Shell.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%202%20Shell.json.md- Test 3 Shell.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%203%20Shell.json.md- Test 4 Shell.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%204%20Shell.json.md- Test 5 Shell.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%205%20Shell.json.md</li> </ul>"},{"location":"BIMsurfer-Serializers/#jsongeometryserializer","title":"JsonGeometrySerializer","text":"<p>Serializes the geometry in JSON. Right now this serializer is being called for every (enabled and existing) IfcProduct subtype.</p> <p>Example files:</p> <ul> <li>Test 1.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%201.json.md- Test 2.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%202.json.md- Test 3.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%203.json.md- Test 4.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%204.json.md- Test 5.json: https://raw.githubusercontent.com/opensourceBIM/BIMserver/master/Documentation/files/Test%205.json.md</li> </ul>"},{"location":"BIMsurfer-Serializers/#even-older-serializers","title":"Even older serializers","text":"<p>The older serializers \"SceneJSSerializer\" and \"StreamingSceneJSSerializer\" are not used anymore.</p>"},{"location":"Best-practices/","title":"Best practices","text":"<p>Some use cases (Best practices) for using BIMserver. (will follow later)</p>"},{"location":"BimServerClient/","title":"Java Client","text":"<p>To connect to a BIMserver you can use one of the 3 protocols: SOAP, JSON or Protocol Buffers. To make connecting to a BIMserver even easier, there also is a Java library you can use.</p>"},{"location":"BimServerClient/#get-the-client-library","title":"Get the client library","text":"<p>From version 1.5 on we are using Maven for all dependency management. We suggest you do too when using the BIMserver Client library as it makes installing all the required dependencies a lot easier.</p> <p>You can find the Maven XML snippet in the latest release notes, BIMserver 1.5.185. Make sure you match the version of the client with the version of your BIMserver. It looks something like this:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.opensourcebim&lt;/groupId&gt;\n    &lt;artifactId&gt;bimserverclientlib&lt;/artifactId&gt;\n    &lt;version&gt;1.5.185&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Eclipse for development, and you are not familiar with Maven yet, use this tutorial.</p> <p>Of course you can also use the client from source code, in that case download a source zip file, or checkout the projects from GIT.</p>"},{"location":"BimServerClient/#examples","title":"Examples","text":"<p>This example connects to a locally running BIMserver on port 8080, authenticates with the default username/password and then creates a new project.</p> <pre><code>package org.opensourcebim;\n\nimport org.bimserver.client.BimServerClient;\nimport org.bimserver.client.json.JsonBimServerClientFactory;\nimport org.bimserver.interfaces.objects.SProject;\nimport org.bimserver.shared.ChannelConnectionException;\nimport org.bimserver.shared.UsernamePasswordAuthenticationInfo;\nimport org.bimserver.shared.exceptions.BimServerClientException;\nimport org.bimserver.shared.exceptions.PublicInterfaceNotFoundException;\nimport org.bimserver.shared.exceptions.ServiceException;\n\npublic class ClientDemo {\n    public static void main(String[] args) {\n        try {\n            JsonBimServerClientFactory factory = new JsonBimServerClientFactory(\"http://localhost:8080\");\n            BimServerClient client = factory.create(new UsernamePasswordAuthenticationInfo(\"admin@bimserver.org\", \"admin\"));\n\n            SProject newProject = client.getServiceInterface().addProject(\"Test Project\", \"ifc2x3tc1\");\n            System.out.println(newProject.getOid());\n        } catch (BimServerClientException e) {\n            e.printStackTrace();\n        } catch (ServiceException e) {\n            e.printStackTrace();\n        } catch (ChannelConnectionException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>BIMserver 1.5 examples:</p> <ul> <li>Connect to a BIMserver: org.opensourcebim.clientdemo.Connecting</li> <li>Create a project: org.opensourcebim.clientdemo.CreateProject</li> <li>Checkin IFC file: org.opensourcebim.clientdemo.CheckinIfcFile</li> </ul>"},{"location":"BimServerClient/#older-examples-might-not-work-anymore-in-15","title":"Older examples (might not work anymore in 1.5)","text":"<p>Examples on how to use the client-library can be found here.</p> <p>Examples on how to use the client-side EMF model can be found here.</p> <p>Examples on how to use the low-level-calls from the client library are here.</p>"},{"location":"BimServerClientMavenEclipse/","title":"Java Client (Maven)","text":"<p>First, make sure your Eclipse version has maven support, if it hasn't you need to install the m2e plugin first.</p> <p>Create a new Maven project (you can also convert an existing project to a Maven project if you want). </p> <p></p> <p></p> <p></p> <p>Edit the pom.xml file. Add the following (make sure the version of the bimserverclientlib matches with the version of BIMserver you want to connect to):</p> <pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.opensourcebim&lt;/groupId&gt;\n            &lt;artifactId&gt;bimserverclientlib&lt;/artifactId&gt;\n            &lt;version&gt;1.5.51&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre> <p></p> <p>Add a new Class </p> <p>Copy and paste the following test-snippet:</p> <pre><code>import org.bimserver.client.BimServerClient;\nimport org.bimserver.client.json.JsonBimServerClientFactory;\nimport org.bimserver.shared.ChannelConnectionException;\nimport org.bimserver.shared.UsernamePasswordAuthenticationInfo;\nimport org.bimserver.shared.exceptions.BimServerClientException;\nimport org.bimserver.shared.exceptions.PublicInterfaceNotFoundException;\nimport org.bimserver.shared.exceptions.ServiceException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            JsonBimServerClientFactory clientFactory = new JsonBimServerClientFactory(\"http://localhost:8080\");\n            BimServerClient client = clientFactory.create(new UsernamePasswordAuthenticationInfo(\"admin@bimserver.org\", \"admin\"));\n            client.getServiceInterface().addProject(\"test\", \"ifc2x3tc1\");\n        } catch (BimServerClientException | ServiceException | ChannelConnectionException e) {\n            e.printStackTrace();\n        } catch (PublicInterfaceNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>Run as Java application </p> <p>The results (note: When you run the application a second time, you will get an error saying the project name is already used). </p>"},{"location":"Checkin/","title":"Introduction","text":"<p>Checkin is the term used to upload complete models to a BIMserver. Because there are several ways to do it, and because it might not be very intuitive this page intends to clarify a few things.</p>"},{"location":"Checkin/#usual-way","title":"Usual way","text":"<p>The usual way would be to call the checkin method on the ServiceInterface. Just look at the documentation for the method. It will return a topicId/checkinId, of which the use is explained here.</p> <p>If you are using JSON, you'll have to encode the actual data (the <code>data</code> argument) in base64. Because of this, using this method is not the most efficient way of checking-in a file in BIMserver. It is however the most consistent way, because this call works just like all other (300) BIMserver calls.</p> <p>Any immediate exception will be in the return message as well, just as all other calls to BIMserver. See section about exceptions in the JSON API for the JSON interface.</p>"},{"location":"Checkin/#other-way","title":"Other way","text":"<p>Because of the overhead of the different implementations of the Service Interfaces (SOAP, PB, JSON) and because of the nature of the checkin method (pushing a lot of data, which makes streaming more suitable) there is another way. You can (HTTP) POST the data to <code>/upload</code>. The required fields are:</p> <pre><code>token: The token you are using, this is the token you get from calling login\ndeserializerOid: Id of the deserializer you want to use\ncomment: A comment for this checkin\nmerge: Whether to merge or not (not working properly, just keep it to false)\npoid: Id of the project\nsync: Whether to call this synchronous or not\nfile: The actual data of the file you are uploading, make sure this is the last field\n</code></pre> <p>The upload servlet will return a bit of json, the structure:</p> <pre><code>{\n  topicId: The topicId // Just like the one you get from calling ServiceInterface.checkin\n}\n</code></pre> <p>If something goes wrong, it will return:</p> <pre><code>{\n  exception: A message\n}\n</code></pre>"},{"location":"Checkin/#topicid","title":"TopicId","text":"<p>In the past, the TopicId was also called CheckinId - both denote the same concept.</p> <p>Get progress:</p> <pre><code>Bimsie1NotificationRegistryInterface.getProgress\n{\ntopicId\n}\n</code></pre> <p>This will return:</p> <pre><code>{\n  state: \"STARTED\" | \"DONE\" | \"NONE\" | \"AS_ERROR\",\n  stage: \"Name of the stage\",\n  title: \"Title\",\n  progress: Percentage\n}\n</code></pre> <p>When something went wrong, e.g., the IFC file is supposedly invalid, the state will be \"AS_ERROR\". A description will be in the title field. The \"stage\" field contains a string describing the current stage of the process, which for example can be \"Generating geometry...\".</p>"},{"location":"Checkin/#using-notification","title":"Using notification","text":"<p>Register to be notified on a change in progress:</p> <pre><code>Bimsie1NotificationRegistryInterface.registerProgressHandler\n{\ntopicId: topicId\nendPointId: othis.server.endPointId\n}\n</code></pre> <p>Read about Endpoints to learn how to acquire an endPointId.</p> <p>When there is new progress, the <code>Bimsie1NotificationInterface.progress</code> method will be called on the client.</p> <pre><code>{\n  topicId: \"\",\n  state: The same state object that is being returned by the call to Bimsie1NotificationRegistryInterface.getProgress.\n}\n</code></pre> <p>Don't forget to unregister:</p> <pre><code>Bimsie1NotificationRegistryInterface.unregisterProgressHandler\n{\ntopicId: topicId\nendPointId: othis.server.endPointId\n}\n</code></pre>"},{"location":"Communication/","title":"Communication","text":""},{"location":"Database---Versioning/","title":"Introduction","text":"<p>The BIMserver is storing all data in a key-value store. The key-value store is being accessed through the KeyValueStore Interface. Right now there is only one implementation, which is using the open source BerkeleyDB Java Edition.</p> <p>A key value store is defined as:   * A set of named tables   * Each table has 2 columns, key and value   * Both the key and value columns can contain an arbitrarily sized byte array, this size may vary per record   * All keys in a table are always ordered   * No duplicate keys can exist</p>"},{"location":"Database---Versioning/#principles","title":"Principles","text":"<ul> <li>Models are stored in projects</li> <li>Each new version of the model is stored a new revision</li> <li>Each revision of the project should always be accessible</li> <li>Revisions, once stored, can never be changed</li> <li>Objects in a project can only reference other objects in the same project.</li> </ul>"},{"location":"Database---Versioning/#details","title":"Details","text":"<p>Each record in a table has the following layout:</p> Key Value Pid (4 bytes) + Oid (8 bytes) + Rid (4 bytes) See description of value <ul> <li>Pid = Project Id</li> <li>Oid = Object Id</li> <li>Rid = Revision Id</li> </ul> <p>One other term which is used is Cid (Class Id), this is a short (2 bytes), and used as a shorter way (than a complete class-name) to reference classes.</p> <p>Records are only added, never modified or deleted.</p>"},{"location":"Database---Versioning/#versioning","title":"Versioning","text":"<p>The image below is showing four revisions of a project. There are 3 tables: A, B and C. The diagrams on top are showing the objects + relations for each revision. The number between the parenthesis is the Oid (Object Id). The tables on the bottom are showing the complete database contents at the end of each revision. The number before the \".\" is the Object Id, the number after the dot is the Rid (Revision Id).</p> <p></p>"},{"location":"Database---Versioning/#value","title":"Value","text":"<p>Please read this first: [Link to description of EMF] For all structural features of the class of the object, some bytes are written to the value part of the record. All values are written in the order defined by the EMF model and include all structural features of all super classes.</p>"},{"location":"Database---Versioning/#single-attributes","title":"Single attributes","text":"Type Size(bytes) Serialisation Null representation String 2 + size of UTF-8 encoded bytes UTF-8 encoded -1 (as a short) Integer 4 Default java serialisation Cannot be null Long 8 Default java serialisation Cannot be null Float 4 Default java serialisation Cannot be null Double 8 Default java serialisation Cannot be null Boolean 1 0 for false, 1 for true Cannot be null Date 8 Number of milliseconds since January 1, 1970, 00:00:00 GMT -1 (as a long) Tristate 1 0 for true, 1 for false, 2 for undefined Cannot be null ByteArray 4 + Length 4 bytes (int) for length + bytes 0 (as an int) Enum 4 Enum literal (int) Cannot be null"},{"location":"Database---Versioning/#single-references","title":"Single references","text":"<p>A null reference is stored as:</p> Short -1 <p>A non-null reference is stored as:</p> Short Long Cid Oid"},{"location":"Database---Versioning/#multiple-attributes","title":"Multiple attributes","text":"<p>Multiple attributes (such as a list of integers) are stored inline. The first two bytes indicate the length of the list, after that all values are serialized like normal single attributes.</p>"},{"location":"Database---Versioning/#multiple-references","title":"Multiple references","text":"<p>Multiple references (lists of references to objects) are also stored inline. The first two bytes indicate the length of the list, after that all values are serialized like normal references.</p>"},{"location":"Database---Versioning/#example","title":"Example","text":"<p>Let's say we have two classes, Person and Company:</p> <p></p> <p>The Person class has Cid 1, the Company class has Cid 2. Both classes have one instance, the person has Oid 100, the Company has Oid 101.</p> <p>When serialized, the values will be</p> <p>The person:</p> Name Age Company (short)4 + 4 bytes (int)80 (short)2 + (long)101 <p>The Company:</p> Name Employees (short)9 + 9 bytes (short)1 + (short)1 + (long)100"},{"location":"Deprecated/","title":"Deprecated","text":""},{"location":"Deprecated/#proposal-to-deprecate","title":"Proposal to deprecate","text":""},{"location":"Deprecated/#query-plugin-interface","title":"Query plugin interface","text":"<p>This has never really worked. Complete model is first loaded into memory, and then the query algorithms do their thing. BimQL seems to be dead and the JavaQueryEngine is too complicated for non-developers.</p> <p>Replacement: New query language</p>"},{"location":"Deprecated/#query-ast","title":"Query AST","text":"<p>This is very old code, not used a lot anymore. The few places where this is used, it can also be replaced by the more efficient New query language</p>"},{"location":"Deprecated/#xslt-serializer","title":"XSLT serializer","text":"<p>Will never perform on realistic models, nobody ever used it</p> <p>Reason to remove: Create expectation that XSLT is good for this</p>"},{"location":"Deprecated/#scenejs-project","title":"SceneJS Project","text":"<p>Not used anymore, more generic BinaryGeometrySerializer and BinaryGeometryMessagingSerializer are now used.</p> <p>Reason: People keep asking why it does not work. Will always be in git history, so let's remove it</p>"},{"location":"Deprecated/#objectidms","title":"ObjectIDM's","text":"<p>Reason: Makes a lot of code needlesslee complex, can be replaced by new query language</p>"},{"location":"Deprecated/#clashdetection-service","title":"ClashDetection service","text":"<p>Reason: It's not working, as class detection has been removed from the RenderEngine interface</p>"},{"location":"Deserializer-Plugin/","title":"Deserializer Plugin","text":"<p>To deserialize a stream of data to an object model.</p> <pre><code>public interface DeserializerPlugin extends Plugin {\n    Deserializer createDeserializer(PluginConfiguration pluginConfiguration);\n    boolean canHandleExtension(String extension);\n}\n</code></pre> <pre><code>public interface Deserializer {\n    void init(SchemaDefinition schemaDefinition);\n    IfcModelInterface read(File file) throws DeserializeException;\n    IfcModelInterface read(InputStream inputStream, String fileName, long fileSize) throws DeserializeException;\n}\n</code></pre> <p>You can subclass EmfDeserializer so you don't have to implement all methods.</p>"},{"location":"Download/","title":"Download","text":"<p>The downloads are available at the https://github.com/opensourceBIM/BIMserver/releases page</p>"},{"location":"Downloading-models/","title":"Download","text":"<p>Downloading models from a BIMserver is a two-step process.</p> <p>Note, when you are using a BIMserver client API, you probably don't need to implement any of this</p>"},{"location":"Downloading-models/#step-1-initiate-the-download","title":"Step 1, initiate the download","text":"<p>The method you call is ServiceInterface.download. This method returns a TopicId (Long). This TopicId can be used to get the actual data described in step2. This process has been split over 2 methods because the process potentially takes a long time and could produce errors along the way. The TopicId can also be used to get information about the progress.</p> <p>The download method has 4 parameters.</p> <ul> <li><code>roids</code>, a set/list of roid: A roid can be acquired by called .oid on a Revision, .lastRevisionId on a Project.</li> <li><code>query</code>, a valid JSON query: When you are using the BIMserver API over JSON, you need to base64 this.</li> <li><code>serializerOid</code>: Tell BIMserver how to serialize the results of the query. See (Acquire serializer).</li> <li><code>sync</code>: Whether this method should return right away (async) or wait for the process to finsh (sync).</li> </ul> <p>More information about Projects , Revisions , Serializers</p>"},{"location":"Downloading-models/#step-2-downloading-the-data","title":"Step 2, downloading the data","text":""},{"location":"Downloading-models/#using-jsonsoapprotocol-buffers","title":"Using JSON/SOAP/Protocol Buffers","text":"<p>This is the most consistent way, because all other communication with BIMserver happens in the same way.</p> <pre><code>SDownloadResult result = ServiceInterface.getDownloadData(topicId);\nDataHandler dataHandler = result.file;\n</code></pre>"},{"location":"Downloading-models/#using-the-download-servlet-direct-http","title":"Using the download servlet (direct HTTP)","text":"<p>This is the preferred way.</p> <p>There are two reasons why this alternative method exists:</p> <ul> <li>To allow the models to be downloaded by browsers, in a way that the downloaded file does not have to be \"extracted\" from another file (for example JSON).</li> <li>For efficiency reasons (for example when using the API over JSON, data would have to be encoded in base64, SOAP would have to do some mtom magic etc...)</li> </ul> <p>The way to use this method is to send a HTTP GET to <code>[yourbimserver]/download</code>. The required parameters:</p> Name Description Required token Your BIMserver auth token Yes topicId The TopicId returned by the download method Yes zip Whether to download the content in a ZIP file. Even if this argument is not \"on\" or not supplied, the content might still be compressed, this depends on the HTTP headers sent/received No"},{"location":"Eclipse-Modeling-Framework/","title":"Introduction","text":"<p>Building Information Models (BIM) are typically Object Oriented and tend to be large. For example the Industry Foundations Classes (IFC) have more than one thousand different classes. Because the BIMserver has been written in Java (an Object Oriented Language), it is very useful to have typed Java classes in the used BIM model. This is where the Eclipse Modelling Framework (EMF) comes into play. For now, the BIMserver uses IFC2x3tc1 internally.</p>"},{"location":"Eclipse-Modeling-Framework/#ifc-schema","title":"IFC Schema","text":"<p>Most BIM meta models are described in a data format. As IFC is based on STEP/EXPRESS technology, the schema is available as an .EXP file. This file has been converted to an EMF Core file with the BuildingSMARTLibrary.</p>"},{"location":"Eclipse-Modeling-Framework/#generating-code","title":"Generating Code","text":"<p>The EMF framework generates Java classes with the given ECore file, these classes are used to store BIM models and passed to the database layer .</p>"},{"location":"Eclipse-Modeling-Framework/#caveats","title":"Caveats","text":"<p>If you load a model from an IFC-Step file, the String values of floating point numbers are being stored as a String as well. If you change the float values programatically, you should update (or clear) the string value.</p>"},{"location":"Eclipse-Modeling-Framework/#three-models","title":"Three models","text":"<p>BIMserver consists of 5 different EMF models:</p> <ul> <li>The IFC2x3tc1 Schema model (as described above) that holds IFC data.</li> <li>The IFC4 Schema model (as described above) that holds IFC data.</li> <li>The Log schema for logging</li> <li>The Store model that holds typical BIMserver data like projects, users, revisions etc.</li> <li>The Geometry model that stores geometry like vertices/indices/normals/colors</li> </ul>"},{"location":"Eclipse-setup-with-Team-project-set/","title":"SProject","text":"<p>\"Team projects sets\" is a feature  of Eclipse that allows you to quickly setup a large list of projects from multiple GIT repositories.</p>"},{"location":"Eclipse-setup-with-Team-project-set/#recipe","title":"Recipe","text":"<ul> <li>Start with an empty workspace</li> <li>Go to File | Import | Team | Team Project Set</li> <li>Select the TPS and import it, this can take a while</li> </ul> <p>Sometimes eclipse has a problem loading big projects. If you have a lot of compile/dependency problems right away, you can try the following two things:</p> <ul> <li>Project | Clean... (and then clear all projects), this will issue a complete recompile of everything</li> <li>Right Mouse on a project | Maven | Update Project ... | Select all projects =&gt; Ok</li> </ul>"},{"location":"Eclipse-setup-with-Team-project-set/#currently-included-repositoriesprojects","title":"Currently included repositories/projects","text":"<ul> <li>All core BIMserver projects (BimServer, BimServerJar, BimServerWar etc...)</li> <li>BIMserver IfcOpenShell plugin</li> <li>IfcPlugins</li> <li>BinarySerializers</li> <li>BIMvie.ws</li> <li>BIMsurfer (v1)</li> <li>BIMserver JavaScript API</li> </ul>"},{"location":"Eclipse-setup-with-Team-project-set/#content-of-the-team-project-set","title":"Content of the Team Project Set","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;psf version=\"2.0\"&gt;\n&lt;provider id=\"org.eclipse.egit.core.GitProvider\"&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,BimServer\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,BimServerClientLib\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,BimServerJar\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,BimServerWar\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMsurfer.git,V1,.\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/bimvie.ws.git,master,.\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BinarySerializers.git,master,BinarySerializers\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/Console.git,master,Console\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,Documentation\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin.git,master,.\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/IfcPlugins.git,master,IfcPlugins\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver-JavaScript-API.git,master,.\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,PluginBase\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,Shared\"/&gt;\n&lt;project reference=\"1.0,https://github.com/opensourceBIM/BIMserver.git,master,Tests\"/&gt;\n&lt;/provider&gt;\n&lt;/psf&gt;\n</code></pre>"},{"location":"Eclipse/","title":"Eclipse","text":"<p>Last updated for Eclipse Mars and BIMserver 1.5</p> <p>We use Eclipse to develop BIMserver. Other IDE's should work as well, but this page describes how to get started with Eclipse.</p> <p>It's best to download the \"Eclipse Modeling Tools\" package, but if you are not going to change the EMF model, you can also just download the \"Standard\" package, or use your own existing installation.</p> <p>This page describes the manual checkout of a lot of required repositories, to speed things up a bit, you can also use Eclipse Team Project Set</p>"},{"location":"Eclipse/#github","title":"GitHub","text":"<p>All BIMserver project are on GitHub. Eclipse should have a Git client already.</p> <ul> <li>Copy the BIMserver GitHub URL to your clipboard (https://github.com/opensourceBIM/BIMserver.git)</li> <li>Open the GIT perspective in Eclipse</li> <li>Right click in the \"Git Repositories\" view and select \"Paste Repository Path or URI\", or just press ctrl-v</li> </ul> <p></p> <ul> <li>Fill in your GitHub credentials if you have them (only required if you are planning to, and have the rights to commit).</li> </ul> <p></p> <ul> <li>Next</li> </ul> <p></p> <ul> <li>Finish (Select the \"Import all existing projects after clone finishes\" checkbox)</li> </ul> <p></p> <ul> <li>Switch back to the Java perspective</li> </ul>"},{"location":"Eclipse/#running-bimserver-from-eclipse","title":"Running BIMserver from Eclipse","text":"<p>To run the BIMserver from eclipse, right click the BimServerJar project, select \"Run As\" and then \"Java Application\", eclipse will look for classes with main methods, you have to select \"LocalDevBimServerStarter\", which is in the package \"org.bimserver\".</p>"},{"location":"Eclipse/#not-enough-memory","title":"Not enough memory","text":"<p>When Java complains there is not enough memory, you can increase the amount of heap memory the BIMserver can use in the \"Run configuration\". Please read these notes on memory in general. Go to the tab \"Arguments\" and add the following to the \"VM arguments\": \"-Xmx4g\" (this is for 4GB of heap).</p> <p> </p> <p>Make sure you are running a 64bit JVM when assigning more than 1300MB of heap!</p>"},{"location":"Eclipse/#adding-the-plugins-property","title":"Adding the plugins property","text":"<p>Before BIMserver 1.3 you had to manually edit some source code (LocalDevPluginLoader.java) to add the locations of your own plugins to run them. Now you can edit the Eclipse run configuration. The reason behind this is that people don't accidentally check-in the LocalDevPluginLoader file, and to make things configurable without source-code-modification.</p> <p>You can add as many \"plugins\" parameters. So for example:</p> <pre><code>-plugins \"C:\\Users\\My Name\\Plugin 1\" -plugins \"/home/myname/plugin2\"\n</code></pre> <p>Typical projects you'd want to link are: \\ https://github.com/opensourceBIM/bimvie.ws.git \\ https://github.com/opensourceBIM/BIMserver-JavaScript-API.git \\ https://github.com/opensourceBIM/BIMsurfer.git (Version 1 is required for BIMvie.ws to run at the moment, make sure you pick the right branch) https://github.com/opensourceBIM/BinarySerializers.git \\ https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin.git \\ https://github.com/opensourceBIM/IfcPlugins.git \\ \"https://github.com/opensourceBIM/console.git</p> <p>For every project, you have to clone the git repository and import the projects. Then copy the location on disk and add it as a \"-plugins\" argument.</p> <p>If you are not planning to change any of these projects, you can of course also just install plugins the regular way.</p> <p></p>"},{"location":"Eclipse/#setup","title":"Setup","text":"<p>For local development, the BIMserver will be automatically setup. An administrator user with the username \"admin@bimserver.org\" will be created with the password \"admin\".</p> <p>All of the API's are provided at http://localhost:8080, as well as a basic user interface. The admin interface is available at http://localhost:8080/apps/console.</p> <p>You now have a working Eclipse environment, we look forward to your pull requests!</p>"},{"location":"Embedding/","title":"Introduction","text":"<p>Updated for BIMserver 1.4</p> <p>Sometimes it is useful to embed BIMserver in another application, this page describes how to do this.</p>"},{"location":"Embedding/#details","title":"Details","text":""},{"location":"Embedding/#create-a-bimserverconfig-instance","title":"Create a BimServerConfig instance","text":"<p>(documentation: https://github.com/opensourceBIM/BIMserver/blob/master/BimServer/src/org/bimserver/BimServerConfig.java)</p> <pre><code>// Example\nBimServerConfig config = new BimServerConfig();\nconfig.setStartEmbeddedWebServer(false);\nconfig.setHomeDir(new File(\"[LOCATION]\"));\nconfig.setResourceFetcher(new LocalDevelopmentResourceFetcher(new File(\"[LOCATION]\")));\nconfig.setClassPath(System.getProperty(\"java.class.path\"));\nconfig.setPort(8080);\nconfig.setStartCommandLine(false);\nconfig.setLocalDev(true);\nconfig.setAutoMigrate(false);\n</code></pre>"},{"location":"Embedding/#create-a-bimserver-instance","title":"Create a BIMserver instance","text":"<pre><code>BimServer bimServer = new BimServer(config);\n</code></pre>"},{"location":"Embedding/#load-plugins","title":"Load plugins","text":"<pre><code>// Example, if you point [LOCATION] to the BIMserver workspace directory, all plugins delivered with BIMserver will be loaded\nLocalDevPluginLoader.loadPlugins(bimServer.getPluginManager(), new File[]{new File(\"[LOCATION]\")});\n</code></pre>"},{"location":"Embedding/#start-the-server","title":"Start the server","text":"<pre><code>bimServer.start();\n</code></pre>"},{"location":"Embedding/#use-the-bimserver-all-useful-objects-are-available-with-getters-on-the-bimserver-object","title":"Use the BIMserver. All useful objects are available with getters on the BimServer object.","text":"<pre><code>BimDatabase bimDatabase = bimServer.getDatabase();\nSettingsManager settingsManager = bimServer.getSettingsManager();\nServiceInterface systemService = bimServer.getSystemService();\nEmfSerializerFactory emfSerializerFactory = bimServer.getEmfSerializerFactory();\nDiskCacheManager diskCacheManager = bimServer.getDiskCacheManager();\nVersionChecker versionChecker = bimServer.getVersionChecker();\nServiceFactory serviceFactory = bimServer.getServiceFactory();\nServerInfo serverInfo = bimServer.getServerInfo();\nMailSystem mailSystem = bimServer.getMailSystem();\nPluginManager pluginManager = bimServer.getPluginManager();\nMergerFactory mergerFactory = bimServer.getMergerFactory();\nLongActionManager longActionManager = bimServer.getLongActionManager();\n// Etcetera\n</code></pre> <p>The main interfaces (that are also available via SOAP/ProtocolBuffers/JSON):</p> <pre><code>// Example getting the ServiceInterface\nServiceInterface si = bimServer.getServiceFactory().get(AccessMethod.INTERNAL).getServiceInterface();\n</code></pre>"},{"location":"Endpoints/","title":"Endpoints","text":"<p>When connecting to BIMserver from another machine/process, you usually use the JSON, ProtocolBuffers or SOAP calls. Those are RPC-like calls that do or do not return something in a synchronous way.</p> <p>Sometimes you want the communication to be issued the other way around. You want BIMserver to initiate. For this to work, the remote side has to tell the BIMserver it is interested.</p>"},{"location":"Endpoints/#step-1-register-an-endpoint","title":"Step 1 - Register an endpoint","text":"<p>The remote side has to register an EndPoint. For now the only type of EndPoint available is a WebSocket. You have to setup a WebSocket to <code>http://[YOUR HOST]:[OPTIONAL PORT]/[OPTIONAL CONTEXT]/stream</code>. BIMserver will send a JSON message:</p> <pre><code>{\n  welcome: 12345\n}\n</code></pre> <p>The number in this message is the current time as UTC milliseconds from the epoch.</p> <p>You have to send your <code>token</code> next, this is the same token you use for normal calls to BIMserver</p> <pre><code>{\n  token: ABCDE...\n}\n</code></pre> <p>Then BIMserver will send you an <code>endPointID</code>, this EndPoint will be matched with the User linked to the token you sent earlier.</p> <pre><code>{\n  endpointid: 12345...\n}\n</code></pre>"},{"location":"Endpoints/#step-2-register-events","title":"Step 2 - Register events","text":"<p>Now you can use this <code>endPointID</code> when registering for certain events, such as progress on some action:</p> <pre><code>NotificationRegistryInterface.registerProgressHandler(topicId, endPointId);\n</code></pre> <p>In the previuos example the <code>topicId</code> is being returned by for example the <code>ServiceInterface.checkin</code> method.</p>"},{"location":"Endpoints/#javascript","title":"JavaScript","text":"<p>Are you using the BIMserver JavaScript API? Then you can register events a bit easier. The API will setup the WebSocket for you.</p> <pre><code>bimServerApi.registerProgressHandler(topicId, handler, callback);\n</code></pre> <p>In this example, <code>handler</code> should be a function reference to the function that should be executed when the progress changes, the <code>callback</code> will be called after the <code>handler</code> is successfully registered.</p>"},{"location":"Endpoints/#unregistering","title":"Unregistering","text":"<p>To make sure no memory and processing power is wasted, please remember to unregister any unused handlers.</p>"},{"location":"Extended-Data/","title":"Extended data","text":"<p>To be written</p>"},{"location":"External-services/","title":"External services","text":"<p>This has been improved and moved to: https://github.com/opensourceBIM/BIM-Bot-services/wiki</p>"},{"location":"FAQ/","title":"FAQ","text":"<p>Find the FAQ section on our issue page.</p>"},{"location":"Feature-statusses/","title":"Feature statusses","text":"<p>This page should reflect the current status of BIMserver features</p> <p>If you test a functionality and it works, but it says \"test\" in this table, please let us know and we will update this document. If you are missing features, please let us know too. If you do not agree on certain decisions, also please let us know! If you want to adopt a feature, well you get the idea...</p> Feature Status Future plans CityGML Serializer Not working Moved to own repository Collada Serializer Not working Moved to own repository Clash Detection Not working Moved to own repository. Maybe move BCF classes to Shared BIMQL Working, but not as documented (e.a. no geometry) Decide whether to improve/fix or create a new query language SceneJS Serializers Not working, not updated Have been removed entirely, not used anymore for SceneJS-based tools (BIMsurfer, BIMvie.ws). Geometry can now be downloaded with https://github.com/opensourceBIM/BinarySerializers Java Query Engine Working Moved to own repository. Remove entirely, not used, too complex, inefficient, easier to write a plugin AdminGUI Removed Removed Charting Working Moved to own repository JavaModelChecker Working Moved to own repository. Remove, same reason as JavaQueryEngine FileBasedObjectIDM Removed Removed IfcEngine Not working Move to own repository XSLT Serializer Unknown Remove, not used, inefficient IFC 2x3tc1 Step Serializer Working Stable IFC 4 Step Serializer Working Stable IFC 2x3tc1 XML Serializer Unknown Test IFC 4 XML Serializer Unknown Test IFC 2x3tc1 Step Deserializer Working Stable IFC 4 Step Deserializer Working Stable IFC 2x3tc1 XML Deserializer Unknown Test IFC 4 XML Deserializer Unknown Test Basic Model Merger Unknown Test GUID Based Model Merger Unknown Test Name Based Model Merger Unknown Test Sending Emails Working Remove, never seen a database server that sends emails JSON API Working Stable SOAP API Unknown Protocol Buffers API Unknown org.bimserver.database.query.conditions.* Working Will be removed in favor of a new query language Database migrations Working Stable BimServerClient Library Basics Working Stable BimServerClient Library - Model modification Unknown Test LowLevelCalls More tests required JAR Starter Working Stable WAR Build Working Stable Generating Geometry Working Stable Logging of events Not working Update Plugin Manager Working Stable Running services Working Stable, but not intuitive Console Working Moved to own repository User/rights management Not fully implemented Check all actions IFC Schema Working Will remove as plugin and integrate directly because there is only one implementation and interface is (too) large. Maybe even move .exp parsing logic to build process, and store serialized version of schema GeoTag Unknown Test, maybe add to bimvie.ws Revision tags Unknown Test, maybe add to bimvie.ws Revision summary Working Maybe replace by new query function, for now stays supported Checkouts Unknown Think about the usefulness, was meant for people working on the same model... Model Checkers Working Stable, more implementations needed Checkin via URL Unknown Test"},{"location":"Get-Started-Quick-Guide/","title":"Quick Guide","text":"<p>Note: BIMserver is a platform for others to build applications on. We provide a stable and flexible platform to create online (open) BIM tools.</p>"},{"location":"Get-Started-Quick-Guide/#stand-alone-bimserver","title":"Stand-alone BIMserver","text":"<ol> <li> <p>Read the wiki page for the relevant version of the requirements document, e.g. Requirements 1.5</p> </li> <li> <p>Make sure you can execute a JAR file by double-clicking a JAR file. If not, check that Java is installed properly and the JAVA environment variables are setup correctly. Make sure you have 64bit Java installed. A JRE for your operating system can be downloaded from Adoptium. Oracle provides JREs for Java 8 only at https://java.com. If you want to use java from the commandline on your Mac, Oracle advises to install a JDK (instead of the JRE).</p> </li> <li> <p>Download the latest file(s). If needed, read about which type of files to download.</p> </li> <li> <p>Assuming this is your first installation, create a new folder in your system, e.g. C:\\BIMserver    Note: avoid creating BIMserver subfolder with spaces like C:\\Program Files or C:\\Program Files (x86)</p> </li> <li> <p>Copy the downloaded bimserver-[version].jar into the above folder, e.g. C:\\BIMserver</p> </li> <li> <p>Double-click on the bimserver-[version].jar file to execute it. This will extract the content of the jar file and create two subfolders, i.e. home and bimserver-[version].</p> </li> <li> <p>Wait for BIMserver to expand all the files and configure itself and until the phrase \"Server started successfully\" appears.</p> </li> <li> <p>Click the Stop button to stop the BIMserver.</p> </li> <li> <p>For BIMserver before 1.5:</p> </li> <li> <p>Download the latest open source BIMserver client, i.e. bimvie-[version].jar from here.</p> </li> <li>Copy the bimvie-[version].jar file into the plugins subfolder under the bimserver-[version] folder.</li> <li>Click the Start button to restart BIMserver. Once the BIMserver has restarted, click Launch Browser.   (in BIMserver 1.5 you are given the option to download bimvie.ws and ifcopenshell plugins during setup / step 10)</li> </ol> <p>If the above steps are followed correctly, you should have BIMserver launched successfully on a browser. If failed, restart BIMserver with another port number, e.g. http://localhost:8082</p> <ol> <li>The first time BIMserver is launched, you will need to set up the administration login.</li> </ol> <p>Third party GUI:</p> <p>There are a few third party GUI available. Some are commercial products that you have to purchase a license for, but there are a few that are free to try or shared freely by others, such as the open source bimvie.ws.</p> <p>Checkin an IFC model</p> <ol> <li>Use http://localhost:[port]/admin/console.html or http://localhost:[port]/apps/console (depending on your version of BIMserver) and run the Checkin API to checkin a model, or</li> <li>Use a GUI such as the bimvie.ws to checkin a model either into an existing project.</li> </ol> <p>View the model</p> <p>bimvie.ws allows viewing of the model. Alternatively, one can use bimsurfer.org</p> <p>Additional Info</p> <ol> <li>Read Setup Guide.</li> <li>Watch this Open Source BIMserver video.</li> <li>As a rule of thumb, set the heap size according to: 15MB per 1MB of IFC file, e.g. for 30MB of IFC file, the heap size should be at least 4GB for normal use with plugins.</li> </ol>"},{"location":"Get-Started-Quick-Guide/#use-bimserver-in-your-application","title":"Use BIMserver in your application","text":"<p>See Developers' Guide.</p>"},{"location":"Global-changes-in-1.5/","title":"Global changes in 1.5","text":"<p>This is a changelist of the main changes in (unreleased) 1.5</p> <ul> <li>Switched to maven for dependency-management and the builds</li> <li>Switched from log4j to logback (still with slf4j as logging facade)</li> <li>Reorganized BIMserver projects, non-core projects moved to their own repositories</li> <li>TBD...</li> </ul>"},{"location":"Home/","title":"BIMserver - an open-source Building Information Model server","text":"<p>Welcome to the Opensource BIMserver wiki!</p> <p>This wiki has grown over the years and contains older and newer information. Some of the older information might be obsolete for the current version. An overhaul of the wiki might be in order. Don't hesitate to report things that seem plain wrong to you.</p>"},{"location":"Home/#trying-and-testing","title":"Trying and testing","text":"<p>If you just want to try and test the BIMserver, dive right into the wiki section \"Get Started\" and the Quick Guide.</p>"},{"location":"Home/#contributing","title":"Contributing","text":"<p>The Opensource BIMserver community has been actively developing since 2013. We are happy to accept contributions as there still are many developments going on. To contribute, you may:</p> <ol> <li>Fork the opensource BIMserver repo, create a new branch, make your changes, write tests if applicable, and do a pull request.</li> <li>Review our issues queue.</li> <li>Create a new issue, if you think you found one that is not yet covered.</li> </ol>"},{"location":"Home/#using-and-extending","title":"Using and extending","text":"<p>BIMserver has a flexible architecture and various interfaces and is meant to be integrated with your software to act as an IFC backend. You may:</p> <ol> <li>Write your own plugin or service.</li> <li>Use the clients or write your own client to have your application talk with a BIMserver instance.</li> <li>Embed the Opensource BIMserver in your application.</li> </ol>"},{"location":"Home/#support","title":"Support","text":"<p>If you need help, first check out this Wiki, the FAQ list and the issue tracker. You can also contact the developers/contributors regarding the issue you encountered. You can reach the maintainers via bimserver@opensourcebim.org.</p>"},{"location":"Home/#some-notes","title":"Some notes:","text":"<ul> <li>If you see a message about 'heap size' in your error log, increase your heap size memory.</li> </ul>"},{"location":"Home/#license","title":"License:","text":"<p>Open Source BIMserver is licensed under the AGPL-3.0. See the LICENSE and the respective wiki page for more details.</p>"},{"location":"How-to-disable-quantity-generation/","title":"How to disable quantity generation","text":"<p>Quantity generation can take quite some time, and for some models 10x as much time!</p> <p>If you are using BIMvie.ws as a frontend: 1. Goto Server | Installed Plugin Bundles 2. Click on the \"IfcOpenShell-BIMserver-plugin\" plugin bundle 3. Click on the \"IfcOpenShell\" plugin 4. Disable \"Calculate Quantities\" and hit \"Save\"</p> <p>Obviously the effect of this will only be visible for new checkins.</p>"},{"location":"IFC-STEP-Encoding/","title":"IFC STEP Encoding","text":"<p>IFC Encoding</p> <p>Updated for version 1.2, TODO latest improvements in 1.5</p>"},{"location":"IFC-STEP-Encoding/#introduction","title":"Introduction","text":"<p>As of version 1.2, all types of STEP's String encoding are supported by the IfcStepSerializer and IfcStepDeserializer.</p> <p>Also see this discussion (archived version from 2013).</p> <p>Further development of the serializers/deserializers encoding/decoding depends on the availability of test files, so if you have problems with certain files, please contact us.</p>"},{"location":"IFC-STEP-Encoding/#differences","title":"Differences","text":"<p>For certain characters, multiple different ways of encoding are possible in the STEP standard. BIMserver internally stores all string as UTF-8. BIMserver uses:</p> <ul> <li>For 32-126: ISO 8859-1</li> <li>For &lt;255: ISO 10646 / ISO 8859-1 (the same for &lt;255)</li> <li>The rest: UCS-2 or UCS-4, depending on the character</li> </ul> <p>So in certain cases IFC strings from data that comes out of BIMserver will be in different encoding than the strings during checkin. Semantically they hold the same information and the same characters should show up in the viewing application.</p> <p>Example: In one of the popular IFC test files (\"AC11-Institute-Var-2-IFC.ifc\") there is a door with the name encoded as \"T\\S|r-012\", the decoded version is \"T\u00fcr-012\". When this model is serialized as IFC again, the encoded version is \"T\\X\\FCr-012\", which is also a valid encoding.</p>"},{"location":"Install-on-Ubuntu-15/","title":"Ubuntu installation","text":""},{"location":"Install-on-Ubuntu-15/#outdated-instruction","title":"Outdated Instruction","text":"<p>You can find the instruction of Ubuntu installation for previous version: version 1.3 and 1.4 installation</p>"},{"location":"Install-on-Ubuntu-15/#configure-ssl","title":"Configure SSL","text":"<p>If you would like to secure your BIMserver installation with HTTPS, follow the SSL Setup Guide for detailed instructions on generating and configuring an SSL certificate.</p> <p>This guide explains how to install BIMserver on a Linux server with Ubuntu using Tomcat as application server. Root privileges are assumed. When running as a normal user, prepend <code>sudo</code> to commands that require elevated privilege. It has been tested in 11/2024 with BIMserver 1.5.185, Ubuntu 22.04.5 and Tomcat 9.0.95. Some sections contain a \"Proxy note\" in the end. Skip these if your server does not have to go through a proxy and jump to the next section.</p>"},{"location":"Install-on-Ubuntu-15/#basic-ubuntu-configuration","title":"Basic Ubuntu configuration","text":"<p>First, configure and update the operating system if necessary.</p> <pre><code>user@local:~$ apt-get update                             # update package list\nuser@local:~$ apt-get upgrade                            # update installed packages to latest version\nuser@local:~$ apt-get install wget unzip default-jre     # install necessary packages\n</code></pre>"},{"location":"Install-on-Ubuntu-15/#proxy-note","title":"Proxy note","text":"<p>If you are using proxy, add your proxy configuration to <code>/etc/profile</code> to configure proxy for terminal user, e.g. enable download with wget. This may not be necessary, if proxies are already configured. If you can run <code>wget</code> without this, omit this step.</p> <pre><code>user@local:~$ vim /etc/profile     # add the proxy settings (see below)\nuser@local:~$ logout               # logout and login again for the settings to take effect\n</code></pre> <p>Additional content for /etc/profile:</p> <pre><code>export http_proxy=http://[PROXY HOST]:[PORT]\nexport https_proxy=https://[PROXY HOST]:[PORT]\nexport no_proxy= [Use the proxy server except for addresses that start with the following entries]\nexport HTTP_PROXY=$http_proxy\nexport HTTPS_PROXY=$https_proxy\nexport NO_PROXY=$no_proxy\n</code></pre>"},{"location":"Install-on-Ubuntu-15/#directories-and-user-setup","title":"Directories and user setup","text":"<p>We will create home directories for BIMserver and Tomcat in the <code>/var</code> directory and assigned the ownership of those directories to the tomcat user and group created for that purpose.</p> <pre><code>user@local:~$ useradd -s /sbin/nologin tomcat         # dedicated user for tomcat without shell access\nuser@local:~$ mkdir /var/bimserver/home               # create bimserver home (\nuser@local:~$ mkdir /var/tomcat                       # create Tomcat home directory for the Tomcat user\nuser@local:~$ chown -R tomcat:tomcat /var/bimserver/  # assign ownership to tomcat user and group\nuser@local:~$ chown -R tomcat:tomcat /var/tomcat/     # assign ownership to tomcat user and group\nuser@local:~$ vim /etc/passwd                         # edit to set Tomcat home (see below)\n</code></pre> <p>Content of /etc/passwd, user ID (1009) may vary:</p> <pre><code>tomcat:x:1009:1009::/var/tomcat:/sbin/nologin\n</code></pre> <p>The home directory names and locations can be selected freely. If you want to have multiple BIMserver home later, you can create a new home directory in <code>/var/bimserver</code>.</p>"},{"location":"Install-on-Ubuntu-15/#install-tomcat","title":"Install Tomcat","text":"<pre><code>user@local:~$ wget [link of tomcat.zip]             # Download tomcat (Make sure you replace this with the latest release!)\nuser@local:~$ mv apache-tomcat-9.0.93.zip /opt/     # move to opt folder (folder for additional software installations)\nuser@local:/opt$ unzip apache-tomcat-9.0.93.zip     # unzip Tomcat\nuser@local:/opt$ rm apache-tomcat-9.0.93.zip        # remove zip, keep exploded folder\nuser@local:/opt$ mv apache-tomcat-9.0.93 tomcat9    # rename folder\nuser@local:/opt$ chmod u+x tomcat9/bin/*.sh         # make scripts executable\nuser@local:/opt$ chown -R tomcat:tomcat tomcat9     # assign ownership to tomcat user and group\n</code></pre> <p>Remove unnecessary directories and contained files:</p> <pre><code>user@local:/opt/tomcat9/webapps$ rm -r ROOT manager host-manager docs examples\n</code></pre> <p>Start and stop tomcat:</p> <pre><code>user@local:~$ sudo -u tomcat /opt/tomcat9/bin/startup.sh   # start tomcat under dedicated user\nuser@local:~$ sudo /opt/tomcat9/bin/shutdown.sh            # stop tomcat\n</code></pre>"},{"location":"Install-on-Ubuntu-15/#deploy-and-configure-bimserver","title":"Deploy and configure BIMserver","text":"<p>Although Tomcat has hot deployment enabled by default, it may be more safe to stop Tomcat before any modifications of the setup and restart after.</p> <p>First download the BIMserver war and deploy it in Tomcat.</p> <pre><code>user@local:~$ wget [link of BIMserver.war]                                       # Download BIMserver\nuser@local:~$ mv bimserverwar-1.5.185.war /opt/tomcat9/webapps/bimserver.war     # move to webapps folder\n</code></pre> <p>Configuration</p> <pre><code>user@local:~$ mkdir /opt/tomcat9/conf/Catalina/localhost               # might already exist\nuser@local:~$ vim /opt/tomcat9/conf/Catalina/localhost/bimserver.xml   # configure bimserver homedir (see below)\n</code></pre> <p>Content of <code>bimserver.xml</code> (enter your bimserver home as value for the \"homedir\" parameter):</p> <pre><code>&lt;Context&gt;\n  &lt;Parameter name=\"homedir\" value=\"/var/bimserver/home\"/&gt;\n&lt;/Context&gt;\n</code></pre>"},{"location":"Install-on-Ubuntu-15/#proxy-note_1","title":"Proxy note","text":"<p>If you are using proxy, configure the proxy settings in <code>setenv.sh</code>. This step may still be necessary, even if the proxy server is already configured externally for the terminal user. You can first attempt to setup BIMserver to check if this configuration is required. If plugin installation fails, delete the home folder and start over again.</p> <pre><code>user@local:~$ vim /opt/tomcat9/bin/setenv.sh     # enter proxy settings for Tomcat\n</code></pre> <p>Additional content of <code>setenv.sh</code>:</p> <pre><code>CATALINA_OPTS=\"-Dhttp.proxyHost=[PROXY HOST] -Dhttp.proxyPort=[PORT] -Dhttps.proxyHost=[PROXY HOST] -Dhttps.proxyPort=[PORT]\"\n</code></pre>"},{"location":"Install-on-Ubuntu/","title":"Install on Ubuntu","text":"<p>These instructions are for the 1.3 release. Updated on 06-10-2014 while installing BIMserver 1.3 on a 122GB AWS machine This tutorial assumes \"root\" privileges, you might have to add \"sudo\" to all statements. This tutorial assumes you already have a working (AWS) server. Make sure you enable the right ports on it as well (80 or 8080)</p> <p>Other users also wrote instructions about installation of BIMserver on several systems. Feel free to add your link to this list:</p> <ul> <li>(June 2017) https://fumblehool.wordpress.com/2017/06/17/install-bim-server-on-ubuntu-server/</li> <li>(October 2015) https://bhushanbharat.wordpress.com/2015/10/13/install-bimserver-on-ubuntu-14-04/</li> <li>(July 2014) https://arshpreetsingh.wordpress.com/2014/07/20/install-bimserver-on-ubuntu/</li> </ul> <p>How to install the BIMserver on a freshly installed Ubuntu 12.04.2 LTS Server Amazon EC2 server.</p> <p>AMI: Ubuntu Cloud Guest AMI ID ami-d0f89fb9 (x86_64) Instance: m1.xlarge machine</p> <p>Of course most (if not all) of the instructions are generic enough for any Ubuntu installation.</p> <p>This guide can be used to install a BIMserver on a cloud based server. Root rights are assumed. When running as a normal user, prepend \"sudo \" to each command (or start your session with sudo -i).</p> <p>Paths can be changed to your liking of course. This is just one way of doing things, yes you can use a different NTP server, yes you can use another JRE implementation etc...</p> <p>Directories chosen for this installation:</p> <pre><code>/var/www/[YOUR DOMAIN]/ROOT.war // For the BIMserver WAR file\n/opt/tomcat7                    // For the Tomcat7 application\n/var/bimserver/home             // For the BIMserver home directory\n</code></pre> <p>[YOUR DOMAIN] should be a DNS entry (can be a subdomain).</p>"},{"location":"Install-on-Ubuntu/#commands","title":"Commands","text":""},{"location":"Install-on-Ubuntu/#basic-configuration-of-ubuntu","title":"Basic configuration of Ubuntu","text":"Command Description apt-get update Update the package index apt-get upgrade Upgrade installed packages apt-get install openjdk-7-jre-headless wget unzip nano ntpdate Install JRE 7 and some tools ntpdate 0.nl.pool.ntp.org Update the local time, useful when looking in log files dpkg-reconfigure tzdata Select timezone"},{"location":"Install-on-Ubuntu/#create-directories-users","title":"Create directories / users","text":"Command Description mkdir /var/www Create a /var/www directory if it's not already there mkdir /var/www/[YOUR DOMAIN] Create a directory for you domain useradd -s /sbin/nologin tomcat7 Create a tomcat7 user chown -R tomcat7 /var/www/[YOUR DOMAIN] Give rights to tomcat7 user to write mkdir /var/bimserver Create a directory for you BIMserver home directory (this has nothing to do with /home on unix systems chown -R tomcat7 /var/bimserver Give the appropriate rights to the tomcat7 user"},{"location":"Install-on-Ubuntu/#install-tomcat7","title":"Install Tomcat7","text":"Command Description cd /opt Goto the /opt directory wget [location of tomcat] -O tomcat7.zip Download tomcat (Make sure you replace this with the latest release!) unzip [filename] Unzip Tomcat7 rm [filename] Remove the downloaded zip file mv [extracted directory] tomcat7 Rename to convenient name chmod +x /opt/tomcat7/bin/*.sh Make .sh files executable mkdir /opt/tomcat7/conf/policy.d Create a policy directory nano /opt/tomcat7/conf/policy.d/default.policy Edit the default policy file <p>Paste the following default code (you can change this later!)</p> <pre><code>grant {\n  permission java.security.AllPermission;\n};\n</code></pre> Command Description chown -R tomcat7 /opt/tomcat7 Change owner of directory tot tomcat7 <p>Change the Tomcat7 configuration file:</p> <pre><code>nano /opt/tomcat7/conf/server.xml\n</code></pre> <p>Change the port attribute in the Connector tag to the desired port (also see: \"Running op ports below 1024\". Also add a new host, see below.</p> <pre><code>&lt;Host name=\"[YOUR DOMAIN]\" appBase=\"/var/www/[YOUR DOMAIN]\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;\n    &lt;Context path=\"\" docBase=\"/var/www/[YOUR DOMAIN]/ROOT.war\"&gt;\n        &lt;Parameter name=\"homedir\" value=\"/var/bimserver/home\"/&gt;\n    &lt;/Context&gt;\n&lt;/Host&gt;\n</code></pre>"},{"location":"Install-on-Ubuntu/#setting-the-homedir","title":"Setting the homedir","text":"<p>By default, BIMserver will store the database folder, the log files etc... in the WEB-INF folder of the extracted .war file of BIMserver. We will call this folder the \"home\" folder. This directory will be removed when you upgrade your BIMserver to a new version because the WEB-INF folder is part of your web application folder. To tell BIMserver to store your \"home\" directory somewhere else, you can set a parameter in your application server configuration (in this case, Tomcat).</p> <p>There are multiple ways, the easiest is to add it to your Host configuration in server.xml (you might already have done this while setting up the host)</p> <pre><code>&lt;Host name=\"[YOUR DOMAIN]\" appBase=\"/var/www/[YOUR DOMAIN]\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;\n    &lt;Context path=\"\" docBase=\"/var/www/[YOUR DOMAIN]/ROOT.war\"&gt;\n        &lt;Parameter name=\"homedir\" value=\"/var/bimserver/home\"/&gt;\n    &lt;/Context&gt;\n&lt;/Host&gt;\n</code></pre> <p>Another way is to add it to a default context of a configured virtual host:</p> <pre><code>&lt;Context path=\"\" docBase=\"/var/www/[YOUR DOMAIN]/ROOT.war\"&gt;\n        &lt;Parameter name=\"homedir\" value=\"/var/bimserver/home\"/&gt;\n&lt;/Context&gt;\n</code></pre> <p>This default context file can be found/created here:</p> <pre><code>[TOMCAT INSTALLATION]/conf/Catalina/[VIRTUALHOST]/context.xml.default\n</code></pre> <p>There are other options as well, for those please see the Tomcat website.</p>"},{"location":"Install-on-Ubuntu/#startup-script","title":"Startup script","text":"<p>To be able to starts/stop/restart tomcat7 you need an init.d script. You can find one [https://gist.github.com/baylisscg/942150 here]. Copy this file to /etc/init.d/tomcat7 and give it execute permissions (<code>chmod +x /etc/init.d/tomcat7</code>).</p> <p>Open the file for editing and find the following variable declarations and change them to:</p> <pre><code>CATALINA_HOME=/opt/$NAME\nCATALINA_BASE=/opt/$NAME\nTOMCAT7_SECURITY=no // You can change this to yes later on\nJAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/jre // Change this to a JRE directory of your choosing, run 'update-alternatives --list java' to see the available ones. Make sure you point to a JRE directory, for example: /usr/lib/jvm/java-7-openjdk-amd64/jre\n</code></pre> <p>Find the line that says:</p> <pre><code>JAVA_OPTS=\"-Djava.awt.headless=true -Xmx4G\"\n</code></pre> <p>and change the amount of heap memory to your liking. Always keep a few hundred megabytes free for your OS and other applications.</p> <p>Restart Tomcat: <code>service tomcat7 restart</code></p>"},{"location":"Install-on-Ubuntu/#install-bimserver","title":"Install BIMserver","text":"Command Description cd /var/www/[YOUR DOMAIN] Go to your domain folder wget location of war file -O ROOT.war Download the latest BIMserver (Make sure you replace this with the latest version!) <p>After this command, Tomcat 7 should start unpacking the downloaded war file in a directory called ROOT. After a while you should be able to connect to the BIMserver with a browser on your http://[YOUR DOMAIN]:[CONFIGURED PORT]. The page you will see should be showing the version of BIMserver and the status (should be NOT_SETUP if this is your first install). Continue to Setup for further configuration.</p> <p>When things are not working, you can look in the Tomcat 7 log file: /opt/tomcat7/logs/catalina.out and the BIMserver log file: /var/bimserver/home/logs/bimserver.log.</p>"},{"location":"Install-on-Ubuntu/#installing-an-smtp-server","title":"Installing an SMTP server","text":"<p>You only have to do this if you do not already have an accessible SMTP server running in your network or with your ISP. Remember running your own SMTP server is a security/spam risk if you don't know how to properly install/maintain it.</p> <p>It really is way easier to use a third party for email, usually can use those for free, mailgun works very nice.</p> <pre><code>apt-get install postfix\n</code></pre> <p>Select \"Internet server\", use a real domain name that is pointing to your server's IP address.</p>"},{"location":"Install-on-Ubuntu/#alternative-to-running-an-smtp-server","title":"Alternative to running an SMTP server","text":"<p>Since BIMserver 1.3 there is an alternative for running your own mailserver. You can now choose a lot more options such as the protocol (SMTP/SMTPS), username, password and port. This allows for using a 3rd party e-mail service which is probably a good choice (and doesn't have to cost extra). Examples of these providers are Mailgun, Amazon SES and Sendgrid.</p>"},{"location":"Install-on-Ubuntu/#running-on-ports-below-1024","title":"Running on ports below 1024","text":"<p>The tomcat7 user has no rights to bind to ports below 1024 (only root can), to make the server available on port 80 (the default HTTP port), you can use iptables (you might have to install the package \"iptables\"):</p> <pre><code>apt-get install iptables\niptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080\n</code></pre> <p>to store these settings:</p> <pre><code>iptables-save\n</code></pre> <p>An alternative with IP addresses (useful when multiple IP adresses are being used on 1 server)</p> <pre><code>iptables -t nat -d [YOURIP] -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination [YOURIP]:8080\n</code></pre> <p>To also forward the local ports do</p> <pre><code>iptables -t nat -I OUTPUT --src 0/0 --dst 127.0.0.1 -p tcp --dport 80 -j REDIRECT --to-ports 8080\niptables -t nat -I OUTPUT --src 0/0 --dst [PUBLIC IP] -p tcp --dport 80 -j REDIRECT --to-ports 8080\n</code></pre> <p>Note: You might also have to install iptables-persistent</p> <p>If you are running on Amazon or another Cloud provider, make sure you enable port 80 (or whatever port you redirect) on their firewall as well.</p>"},{"location":"Install-on-Ubuntu/#multicast-on-loopback-interface","title":"Multicast on loopback interface","text":"<p>On ubuntu you can apparently run into this error (thanks https://github.com/hlg):</p> <p>When running BIMserver locally on Ubuntu without any internet connection using the JAR starter, then server startup fails with:</p> <pre><code>java.net.SocketException: No such device\n  at java.net.PlainDatagramSocketImpl.join(Native Method)\n  at java.net.AbstractPlainDatagramSocketImpl.join(AbstractPlainDatagramSocketImpl.java:178)\n  at java.net.MulticastSocket.joinGroup(MulticastSocket.java:319)\n  at org.apache.cxf.transport.udp.UDPDestination.activate(UDPDestination.java:168)\n  ... 35 more\n</code></pre> <p>This is due to the loopback interface not having multicast traffic allowed by default. This can be enabled with:</p> <pre><code>sudo ifconfig lo multicast\nsudo route add -net 224.0.0.0 netmask 240.0.0.0 dev lo\n</code></pre> <p>The solution was found at ubuntuforms.org. Please add this information to the BIMserver wiki.</p>"},{"location":"Installing-without-internet-connection/","title":"Installing without internet connection","text":"<p>Starting from BIMserver 1.5.69 or higher, it is possible to install BIMserver plugins during the setup procedure when there is no working outgoing internet connection. This page describes how to do this. Mind you that this is not the recommended way to install plugins. If you have a working internet connection, just select the plugins you want during setup.</p>"},{"location":"Installing-without-internet-connection/#selecting-the-plugins-to-install","title":"Selecting the plugins to install","text":"<p>You can browse https://oss.sonatype.org/content/groups/public/org/opensourcebim/ to find plugins you want. Most people will just want to install the default BIMserver GUI called BIMvie.ws. You can find BIMvie.ws here:</p> <p>https://oss.sonatype.org/content/groups/public/org/opensourcebim/bimviews</p> <p>Make sure you download the JAR file of the most recent version.</p> <p></p> <p>Please note that unfortunately the maven repository is cluttered with old versions. All the plugins that are completely undercased are the recent ones.</p> <p>BIMvie.ws has two dependencies which will not be automatically installed, so make sure to install those as well: - https://oss.sonatype.org/content/groups/public/org/opensourcebim/bimserverapi/ - https://oss.sonatype.org/content/groups/public/org/opensourcebim/bimsurfer/</p>"},{"location":"Installing-without-internet-connection/#installing-the-plugins","title":"Installing the plugins","text":"<p>You can do this during the setup process in the \"Plugins\" tab.</p> <p></p>"},{"location":"JAR-Starter/","title":"JAR Starter","text":"<p>To make it easier to evaluate BIMserver, a cross platform executable build is created that allows you to run a BIMserver on your desktop computer. The executable is a JAR file, most operating systems allow you to double click the file to start running it.</p> <p>(Windows) Make sure you do not put the .jar file in C:\\Program Files or C:\\Program Files (x86) because Windows plays funky tricks with those directories [http://www.hanselman.com/blog/VistasShowCompatibilityFilesAndTheScrumptiousWonderThatIsFileVirtualization.aspx]</p> <ul> <li>Make sure you have a recent version of a Java Runtime Environment (JRE) or Java Development Kit (JDK). A JRE for your operating system can be downloaded from Adoptium. Oracle provides JREs for Java 8 only at https://java.com.</li> <li>Download the latest JAR build from https://github.com/opensourceBIM/BIMserver/releases.</li> <li>Some browsers rename the JAR file, make sure it ends with \".jar\"</li> <li>Start the program by double clicking.</li> <li>Normally you won't have to change any settings and you can simply start the BIMserver by clicking \"Start\".</li> </ul> <p>(OSX) You can change the default JVM under Applications | Utilities | Java Preferences, on some OSX installations this somehow defaults to an older version of Java where the BIMserver needs at least version 8.</p> <p></p> Settings Meaning JVM Allows for a JVM other than the default JVM to be selected (This feature seems to not be working for some people) Home directory Location of the home directory, this is where the database, log files etc... are stored. If you have ran a previous version of BIMserver on the same home directory, the database cannot always be migrated successfully Address The address the server will be binding on, if you want the BIMserver to be available on other machines than your own, you will have to change this to a real IP address or a hostname pointing to the right IP address Port The port must be free, and the firewall must be configured to allow listening on this port Max heap size The amount of heap memory appointed to the instance JVM of the BIMserver, more heap means larger models can be stored/retrieved. The amount of heap is limited by the amount of memory available on your machine, but be sure to always save a few hundred of MB's to your OS and other applications. On 32-bit Windows computers, the limit is around 1500MB. A Typical BIMserver will need at least 2GB Max Perm Size 256MB should be enough, if you are deploying a lot of plugins you might need more Stack size The amount of stack size available for every thread, you are probably not ever going to need more than 512KB. With a stack size that is too low, you will be getting StackOverflowError messages Force IPv4 On some operating systems binding will happen automatically on the IPv6 address of a machine, even if the user is not using IPv6. With this option you can override to use IPv4, only use this option if you have problems with this spcific issue Use proxy server You can check this option if you need to use a proxy server for outgoing connections Proxy Host The host of your proxy server Proxy Port The port of your proxy server"},{"location":"JSON-API/","title":"JSON","text":"<p>JSON is one of the three available channels to access the methods of the Service Interfaces.</p> <p>The JSON interface is mainly there to facilitate connecting to the BIMserver from web applications/web sites. It is however also very useful when connecting from other applications like for example web servers or BIM/CAD software.</p>"},{"location":"JSON-API/#connecting-from-a-web-applicationweb-site","title":"Connecting from a web application/web site","text":"<p>The following information is outdated and needs update. May also be covered in the clients section of the Wiki.</p> <p>For this purpose we have created a small JavaScript library, this library is being served by all BIMservers on <code>[address]/js/bimserverapi.js</code>. Your code should download it, and then instantiate the API like this:</p> <pre><code>  var bimServerApi = new BimServerApi(\"http://examplebimserver:port\");\n</code></pre> <p>Have a look at the JavaScriptApi or JavaScriptClient page for more details on the JavaScript API.</p>"},{"location":"JSON-API/#connecting-from-non-javascript-applications","title":"Connecting from non-javascript applications","text":"<p>For every call you should send an HTTP POST request to <code>http://[address]:[port]/[optional context]/json</code>. The body of this request should be an UTF-8 encoded JSON message. The structure of this message is the following:</p> <pre><code>{\n  token: \"ABCDEF1234567890\",\n  request: {\n    interface: \"ServiceInterface\",\n    method: \"getAllProjects\",\n    parameters: {\n      onlyTopLevel: true\n    }\n  }\n}\n</code></pre> <p>Of course the required parameters depend on the actual method you are calling. All parameters are always required. For almost all calls you have to include a valid token. The token can be obtained by 2 methods: <code>login</code> or <code>autologin</code>. Those 2 methods do not require a token themselves.</p> <p>A typical response for a <code>login</code> call looks like this:</p> <pre><code>{\n  response: {\n    result: \"ABCDEF012345567890\"\n  }\n}\n</code></pre>"},{"location":"JSON-API/#exception","title":"Exception","text":"<p>When an exception occurs the message looks like this:</p> <pre><code>{\n  response: {\n    exception: {\n      __type: \"UserException\",\n      message: \"User account has been deleted\"\n    }\n  }\n}\n</code></pre> <p>The <code>__type</code> parameters here helps client-side libraries to construct and throw appropriate exception.</p>"},{"location":"JSON-API/#multiple-calls-in-one-request","title":"Multiple calls in one request","text":"<p>Sometimes it's useful to call multiple remote methods in one request. For example in asynchronous languages like javascript you sometimes want to combine the results of multiple calls, which would result in a sequence of chronologically executed calls, resulting in acummulated latency and unreadable code.</p> <pre><code>{\n  token: \"ABCDEF1234567890\"\n  requests: [{\n    interface: \"ServiceInterface\",\n    method: \"getAllProjects\",\n    parameters: {\n      onlyTopLevel: true\n    }\n  }, {\n    ...another call...\n  }]\n}\n</code></pre> <p>Notice that the same token is used for all calls. The response looks like this:</p> <pre><code>{\n  responses: [{\n    result: \"ABCDEF012345567890\"\n  }, {\n    exception: {\n      __type: \"UserException\",\n      message: \"User account has been deleted\"\n    }\n  }]\n}\n</code></pre> <p>In this response the first call executed successfully, and the second call failed. Note that all responses have the same array index as their corresponding request objects.</p>"},{"location":"JSON-Queries/","title":"JSON Queries","text":"<p>The new query language is still in development, so expect this to change.</p> <p>You can read the original motivations to write this language here</p>"},{"location":"JSON-Queries/#intro","title":"Intro","text":"<p>Some characteristics to of this language to keep in mind:</p> <ul> <li>The data model of the \"queried\" is the same data model as the \"query results\". In most cases it will be Ifc2x3tc1 or Ifc4.</li> <li>The previous also explains why there are no aggregates (such as <code>COUNT</code>, <code>AVG</code>, <code>MAX</code>, etc. in SQL), because there is no place to store those.</li> <li>A query result is always a subset of the original model.</li> <li>Query language is probably not the best term here, a \"filter language\" might be better.</li> <li>The queries are based on objects. Geometry is not treated any other way. If you don't ask for geometry, you won't get it.</li> </ul>"},{"location":"JSON-Queries/#json","title":"JSON","text":"<p>All queries must be valid JSON. This means that all keys must be quoted, all strings must be quoted. When sending a query to BIMserver using the ServiceInterface.download method through JSON, ensure that your query is base64 encoded.</p> <p>For further information regarding downloading the data via queries, please check Downloading models</p>"},{"location":"JSON-Queries/#base-query","title":"Base query","text":"<p>This query will query all objects.</p> <pre><code>{}\n</code></pre>"},{"location":"JSON-Queries/#type-query","title":"Type query","text":"<p>This query will get all IfcWall objects</p> <pre><code>{\n  \"type\": \"IfcWall\"\n}\n</code></pre> <p>When your model for example only contains IfcWallStandardCase objects, this query will not return any objects, although IfcWallStandardCase is a subtype of IfcWall. To include subtypes, you have to explicitly define this:</p> <pre><code>{\n  \"type\": \"IfcWall\",\n  \"includeAllSubtypes\": true\n}\n</code></pre> <p>You can also query multiple types, the next example would give you all IfcDoor and IfcWindow objects</p> <pre><code>{\n  \"types\": [\"IfcDoor\", \"IfcWindow\"]\n}\n</code></pre>"},{"location":"JSON-Queries/#guid-query","title":"GUID query","text":"<p>When you already know the GUID(s) of (an) object(s), you can query those directly:</p> <pre><code>{\n  \"guids\": [\"GUID1\", \"GUID2\"]\n}\n</code></pre>"},{"location":"JSON-Queries/#oid-query","title":"OID query","text":"<p>The same as for GUIDs, you can also query by OID (ObjectID)</p> <pre><code>{\n  \"oids\": [1523, 2130, 898]\n}\n</code></pre>"},{"location":"JSON-Queries/#properties","title":"Properties","text":"<p>Every IFC object has a fixed set of fields. For example the IfcWindow has the fields \"OverallWidth\" and \"OverallHeight\" and many more. To use properties that are not defined in the schema, every object can be extended with more properties by adding them using IfcPropertySet and IfcProperty. For example IfcWall objects that are external can be queried via the property <code>IsExternal</code> in property set <code>Pset_WallCommon</code>:</p> <pre><code>{\n  \"type\": \"IfcWall\",\n  \"includeAllSubtypes\": true,\n  \"properties\": {\n    \"Pset_WallCommon\": {\n      \"IsExternal\": true\n    }\n  }\n}\n</code></pre>"},{"location":"JSON-Queries/#serializing-to-ifc","title":"Serializing to IFC","text":"<p>In a lot of cases, the results of the query will be serialized as IFC. The previous examples would however not result in valid IFC files. For an IFC file to be valid, it not only has to solely contain objects that conform to the IFC schema, also certain references should always be included. For example every object must have an IfcOwnerHistory. Also there must always be an 1 IfcProject object.</p> <p>Example of the body of an IFC file for the IfcWall query:</p> <pre><code>#1= IFCWALLSTANDARDCASE('1hmUg1hfv4UPf0UtHFe7ta',$,'SW - 009',$,$,$,$,'6BC1EA81-AE9E-4479-9A-40-7B744FA07DE4');\n#2= IFCWALLSTANDARDCASE('05UYVl82vAa8mFc3FMTYL7',$,'SW - 010',$,$,$,$,'057A27EF-202E-4A90-8C-0F-9833D6762547');\n#3= IFCWALLSTANDARDCASE('37ZZt1nzL2nu6PjSr0Wa2a',$,'SW - 011',$,$,$,$,'C78E3DC1-C7D5-42C7-81-99-B5CD408240A4');\n#4= IFCWALLSTANDARDCASE('1EzyXtTtv7RAinwkFVr6_I',$,'SW - 012',$,$,$,$,'4EF7C877-777E-476C-AB-31-EAE3DFD46F92');\n#5= IFCWALLSTANDARDCASE('08u2EMNSnBL8Izk3LNHAwK',$,'SW - 013',$,$,$,$,'08E02396-5DCC-4B54-84-BD-B8355744AE94');\n</code></pre> <p>The above IFC file is invalid because none of the IfcWallStandardCase entities references an IfcOwnerHistory, also no IfcProject is there. Also note that no geometry is present, so you won't see anything in an IFC viewer.</p> <p>To make creating valid IFC files with queries easier, a few predefined includes are available for the IFC versions supported in BIMserver. For every IFC schema, there is a respective \"standard library\" holding these predefined includes, for example <code>ifc2x3-stdlib</code> and <code>ifc4-stdlib</code>.</p> <p>To make the IfcWall example work in IFC4, this would be the new query:</p> <pre><code>{\n  \"type\": \"IfcWall\",\n  \"includeAllSubtypes\": true,\n  \"includes\": [\n    \"ifc4-stdlib:ContainedInStructure\",\n    \"ifc4-stdlib:OwnerHistory\",\n    \"ifc4-stdlib:Representation\",\n    \"ifc4-stdlib:ObjectPlacement\"\n  ]\n}\n</code></pre> <p>Each include has a different function.</p>"},{"location":"JSON-Queries/#ifc4-stdlibcontainedinstructure","title":"ifc4-stdlib:ContainedInStructure","text":"<p>ifc4-stdlib:ContainedInStructure will make sure all the spatial containment references \"up\" will be followed.</p> <p>Example project structure</p> <pre><code>IfcProject\n  IfcSite\n    IfcBuilding\n      IfcBuildingStorey\n        IfcSpace\n          IfcWall\n</code></pre> <p>For each IfcWall encountered, the tree will be \"walked\" all the way up. This automatically includes the IfcProject which is a requirement for a valid IFC file</p>"},{"location":"JSON-Queries/#ifc4-stdlibownerhistory","title":"ifc4-stdlib:OwnerHistory","text":"<p>For every IfcWall, the OwnerHistory will be included</p>"},{"location":"JSON-Queries/#ifc4-stdlibrepresentation","title":"ifc4-stdlib:Representation","text":"<p>For every IfcWall, the Representation will be included. This can be a very large network/tree of objects. Representation is what gives object geometry in a viewer</p>"},{"location":"JSON-Queries/#ifc4-stdlibobjectplacement","title":"ifc4-stdlib:ObjectPlacement","text":"<p>This makes sure that all objects will also include their placement, which put's the object's geometry in the right place.</p>"},{"location":"JavaScriptClient/","title":"JavaScript Client","text":"<p>To make communication with the BIMserver easier we have made a simple API library you can use. Of course you can also implement your own API in JavaScript.</p>"},{"location":"JavaScriptClient/#requirements","title":"Requirements","text":"<p>From 2015-10-14 on, the old bimserverapi.js file has been splitted into multiple files. Here is a little bit of boilerplate code to load it, make sure you include \"require.js\":</p> <p>Note: This is not yet working on NodeJS, if you figure out how to get it working, please let us know!</p> <pre><code>    requirejs.config({\n        baseUrl: address + \"/js\", // address should be the address of your bimserver, including optional port\n        urlArgs: \"bust=\" + version // the version you use here will be used for caching\n    });\n\n    requirejs([\"bimserverapi_BimServerApi\", \"bimserverapi_BimServerApiPromise\"], function(BimServerApi, BimServerApiPromise) {\n        if (address.endsWith(\"/\")) {\n            address = address.substring(0, address.length - 1);\n        }\n        if (BimServerApi != null) {\n            var bimServerApi = new BimServerApi(address, notifier);\n            bimServerApi.init(function(){\n                // This function gets called on success, you can use bimServerApi now\n            });\n        } else {\n            // error\n        }\n    }, function (err) {\n        // Error\n    });\n</code></pre> <p>This new API is not depending on jquery anymore.</p>"},{"location":"JavaScriptClient/#communication","title":"Communication","text":"<p>The JavaScript API will communicate via JSON for most of the functions. Only downloading and uploading will sometimes be done without using JSON for performance reasons.</p>"},{"location":"JavaScriptClient/#using-the-api","title":"Using the API","text":"<p>All methods in the Service Interfaces can be called (make sure you look at the right documentation for your version). You must always use all parameters that are defined. Also when sending complex objects, you should define all the properties of the objects. The first call you will usually do is to login.</p> <pre><code>bimServerApi.login(username, password, rememberme, function (data) {\n  // Success\n});\n</code></pre> <p>Not all calls have been implemented in the JavaScript API, but it is very easy to use them anyways. The following example will list all the available projects:</p> <pre><code>bimServerApi.call(\n  \"Bimsie1ServiceInterface\",\n  \"getAllProjects\",\n  { onlyTopLevel: true, onlyActive: true },\n  function (data) {\n    data.forEach(function (project) {\n      console.log(project);\n    });\n  }\n);\n</code></pre> <p>TODO: Document the use of the Model class</p>"},{"location":"Known-issues/","title":"Known Issues","text":"<p>Some issues are hard/impossible to fix, therefore we mention them here.</p>"},{"location":"Known-issues/#paths","title":"Paths","text":"<p>Because the BIMserver is starting separate processes for the IFCEngine (used for generating geometry and clasdetection), paths are a peculiar (and operating system based) thing. For windows: Paths can contain spaces, but not multiple spaces together:   * Right: \"C:\\Program Files\\BIMserver 1.0\"   * Wrong: \"C:\\Program Files\\BIMserver  1.0\"   * For OSX: Paths cannot contain any spaces at all   * For linux: Paths cannot contain any spaces at all</p>"},{"location":"Known-issues/#inverses","title":"Inverses","text":"<p>Update: This has actually been fixed within BIMserver. These 12 combinations of incomplete inverses will be set by BIMserver on checkin.</p> <p>IFC has the notion of \"inverse\" relations. EMF has the notion of \"opposites\", where possible those have been mapped, but it's not always possible so sometimes \"inverses\" won't work the way you would think.</p> <p>The problem with inverses in IFC is that one can be defined on type \"A\", referencing a certain field on type \"B\" which in turn does not point to the field of type \"A\", but to a field on a super- or subtype of \"A\". EMF does not support these kind of opposites. The effect of this is that opposites won't automatically be set when setting one reference, you will have to set the other as well.</p> <p>Real IFC Example:</p> <p></p> <p>And another:</p> <p></p> <p>Another case is IfcRelAssociates.RelatedObjects (IfcRoot) which does not match with its inverse IfcObject.HasAssociations (IfcRelAssociates).</p> <p>You can read part of the very early discussion here. There is also a publication about inverse references (Section 2.2 on this mismatch issue): Tauscher H. (2022). Analysis and effective use of inverse relation attributes in IFC. In: Proc. 14th European Conference on Product and Process Modelling (ECPPM), Trondheim, Norway, 2022. Doi: 10.1201/9781003354222-95.</p>"},{"location":"Known-issues/#derived-attributes","title":"Derived attributes","text":"<p>This is not really an issue, but it's good to know why not all schema data can be stored in the EMF meta model. In IFC, derived attributes can be defined, those attributes are usually calculated based on explicit attributes. Derived attributes usually do not appear in the IFC files, but there is one exception. When a derived attribute is defined, but one of the superclasses of the class has the same attribute, the field should be serialized as a \"*\". For serializers/deserializers, this information is necessary, but we cannot store this in the EMF meta model. Because in EMF all structural features are created only once (also when subclasses exist), so we cannot store class-specific information in the structural features.</p>"},{"location":"Known-issues/#eclipsejava-7","title":"Eclipse/Java 7","text":"<p>Note: BIMserver &gt; 1.5 will only run on Java 8 or higher Note: This problem has been resolved in Eclipse Kepler</p> <p>Compiling the BIMserver in Eclipse 3.7.1 and then running in Java 7 (update 2) currently generates the following error, which is probably a bug in the eclipse compiler:</p> <pre><code>java.lang.VerifyError: Inconsistent stackmap frames at branch target 196 in method nl.tue.buildingsmart.express.parser.Express2DictWalker.select_list(Lantlr/collections/AST;)Ljava/util/List; at offset 156\n</code></pre> <p>Update on 2012-04-09: According to the Eclipse bugtracking system this bug should be fixed in Eclipse 3.7.2 but I am still getting the error, a workaround has been posted on https://bugs.eclipse.org/bugs/show_bug.cgi?id=362591.</p> <p>The workaround: Add \"-XX:-UseSplitVerifier\" when running.</p>"},{"location":"Known-issues/#select-subtype-of-type-enum","title":"Select subtype of type enum","text":"<p>The following is an example, there could be more.</p> <p>IfcPresentationStyleSelect has IfcNullStyle as a 'subtype', but IfcNullStyle is en enum. This is not supported in Java or EMF, files containing this construction will fail to deserialize at the moment.</p> <p>Both the select type and the enum sub type are deprecated as of IFC 4.</p>"},{"location":"Known-issues/#other-ifc-problems","title":"Other IFC problems","text":"<p>IfcCompoundPlaneAngleMeasure is a defined type derived from a list, which does not work in EMF/Java.</p> <p>IfcComplexNumber is a defined type derived from an array, which does not work in EMF/Java.</p>"},{"location":"Known-issues/#more-issues","title":"More issues","text":"<p>For more know issues have a look at the issue list</p>"},{"location":"Large-databases/","title":"Large databases","text":"<p>This page tries to explain why your database grows the way it does.</p>"},{"location":"Large-databases/#models","title":"Models","text":"<p>Obviously Building Information Models take up most of the space. BIMserver does versioning based on revisions. This means that every object will be stored with information about the project it belongs to, the revision it belongs to and it's own identifier.</p> <p>When you are uploading multiple IFC files to the same project, all data will be stored. Even if only small parts of the model have changed, every object is stored again. The reason for this is that it's impossible for BIMserver to figure out what has changed, and which object have stayed the same.</p> <p>That's why we also added the low level calls, to actually change models by telling what has changed, instead of telling what the new complete model looks like.</p>"},{"location":"Large-databases/#geometry","title":"Geometry","text":"<p>In IFC (Industry Foundation Classes), 3D model geometry can be represented in various complex ways such as extrusion, bounding box, B-splines, triangles, and more. However, most 3D software and viewers can only handle one type of geometry: triangles.</p> <p>To display these models correctly, we need to convert all the different types of geometry into triangles. This conversion process is handled by the \"render engine\" in BIMserver, typically using a library like IfcOpenShell. However, this conversion can be time-consuming.</p> <p>To avoid repeated conversions every time a model is viewed, we store the converted triangle data directly in the database. The amount of data needed for this depends on the complexity and types of geometry present in the IFC file.</p>"},{"location":"Large-databases/#other-data","title":"Other data","text":"<p>Apart from the Building Information Models BIMserver also stores information about projects, revisions, users, checkouts, history etc... This data is also being versioned, but on a per-object basis. So if you change the name of a project, the project (object) will be stored again in the database with a new revision number. Usually these objects don't take up too much space, but certain access patterns can definitely make this explode.</p>"},{"location":"License/","title":"FAQ","text":"<p>Information about usage and interpretation of the licenses of BIMserver.org projects can be found on http://bimserver.org/license/ (archived version from 2019). If you have any questions or remarks on the use of BIMserver in your project, please contact bimserver@opensourcebim.org.</p>"},{"location":"License/#licenses-of-projects","title":"Licenses of projects","text":"<p>The code repository of BIMserver.org consists of several different projects. Every project has its own license.  Some projects are depending on each others code. </p> <p>Below is a list of projects and their respective licenses used in BIMserver version <code>1.4</code>. With version <code>1.5</code>, a new architecture has been introduced, restructuring into separate categories as plugins and modules.</p> Project License AdminGUI AfferoGPLv3 BimServer AfferoGPLv3 BimServerClientLib AfferoGPLv3 BuildingSMARTLibrary AfferoGPLv3 Builds GPL, Affero and LGPL (all 3v) see GIT for details! Charting GPL, Affero and LGPL (all 3v) see GIT for details! CityGML AfferoGPLv3 ClashDetection AfferoGPLv3 Collada AfferoGPLv3 DemoPlugins AfferoGPLv3 FileBasedObjectIDM GPLv3 GeneratedSOAPclient GPLv3 Ifc AfferoGPLv3 IFCEngine special non open source license (see GIT for details) IfcPlugins AfferoGPLv3 JavaQueryEngine GPLv3 Mergers GPLv3 MiscSerializers GPLv3 SceneJS AfferoGPLv3 Shared AfferoGPLv3 TestData GPLv3 TestViewer GPLv3 Tests AfferoGPLv3 Tools AfferoGPLv3 XsltSerializer AfferoGPLv3 Utils AfferoGPLv3 ExampleSerializer GPLv3 ExampleDeserializer GPLv3 <p>When license indications on this page or in GIT differ, the GIT (text in code) will prevail. </p>"},{"location":"License/#links","title":"Links","text":"<p>Information about the different licenses:</p> <p>GPL</p> <p>LGPL</p> <p>Affero</p>"},{"location":"Low-Level-Calls/","title":"Intro","text":"<p>To allow for more granular access to information stored in BIMserver, the \"Low Level Calls\" have been added.</p>"},{"location":"Low-Level-Calls/#workflow","title":"Workflow","text":""},{"location":"Low-Level-Calls/#start-a-transaction","title":"Start a transaction","text":"<p>First you call <code>startTransaction</code>. The only parameter you have to give is the <code>poid</code> (Project ID). This call will return a <code>tid</code> (Transaction ID). This Transaction ID will be used for all subsequent calls.</p>"},{"location":"Low-Level-Calls/#readwrite-data","title":"Read/Write data","text":"<p>There are a lot of calls to read/write data. All of them can be found in the <code>LevelInterfaceinterface</code> or here. For example you can call</p> <pre><code>getIntegerAttribute(tid, oid, \"OverallWidth\").\n</code></pre> <p>The <code>oid</code> is the ObjectID of the object of which you would like to get the attribute with the name <code>\"OverallWidth\"</code>.</p> <p>It's the same for changing attributes. For example you can call.</p> <pre><code>setStringAttribute(tid, oid, \"GlobalId\", \"GUID123455\");\n</code></pre>"},{"location":"Low-Level-Calls/#commit-abort","title":"Commit / Abort","text":"<p>After changing the model, you can decide to either commit the changes, or abort the transaction. When you abort the transaction all changes will be discarded, and there will not be a new revision. When you commit the changes, a new revision will be made.</p> <pre><code>commit(tid, \"Comment\");\n</code></pre>"},{"location":"Memory-and-Java/","title":"More memory","text":"<p>Since a lot of people ask questions about BIMserver and configuring it's Heap Size, this page hopes to clarify some details.</p> <p>Java, unlike most native software, needs to know the maximum amount of memory it can use upfront. You have to specify this maximum amount of memory (Heap Size) to the Java Virtual Machine (JVM) using the -Xmx argument. Here\u2019s how to do it:</p>"},{"location":"Memory-and-Java/#setting-the-heap-size","title":"Setting the Heap Size","text":"<p>For 4GB of memory:</p> <pre><code>-Xmx4g\n</code></pre> <p>For 16GB of memory:</p> <pre><code>-Xmx16g\n</code></pre>"},{"location":"Memory-and-Java/#considerations-for-choosing-the-heap-size","title":"Considerations for choosing the heap size","text":"<p>Java will not necessarily use all the memory that is given, <code>-Xmx</code> specifies just a maximum amount it can use. The amount should cover the BIMserver requirements, but not exceed the available resources.</p>"},{"location":"Memory-and-Java/#bimserver-requirements","title":"BIMserver Requirements:","text":"<p>BIMserver needs at least 1GB. Depending on usage and plugins, BIMserver might require up to 100GB. See Memory usage.</p>"},{"location":"Memory-and-Java/#external-limitations","title":"External Limitations:","text":"<p>The available and usable amount of memory is also limited by various factors, namely your machine's physical resources, the operating system and the JVM bitness.</p> <ol> <li> <p>You cannot allocate more memory than the physical (or virtual) memory of your machine. It has to be less then that because other software (including the OS) will also use memory. Depending on what OS/software is installed, keep at least 1GB free for the other software.</p> </li> <li> <p>Your computer and operating system can have a 32-bit or 64-bit architecture. With 32-bit OS, the maximum physical memory that can be addressed is limited to 4GB. With 64-bit there are no relevant limitations for memory allocation.</p> </li> <li> <p>The JVM cannot use the full physical and addressable memory due to the reasons under 1. A 32-bit JVM on a 32-bit OS usually can use up to approximately 1300MB of memory, which is not much! Thus, if you are on 64-bit OS, ensure you are using a 64-bit JVM to avoid memory limitations. Using a 32-bit JVM on a 64-bit OS is not recommended for running a BIMserver.</p> </li> </ol>"},{"location":"Memory-and-Java/#tomcat-user","title":"Tomcat user","text":"<p>In order to change the memory allocation in Tomcat, please follow this step:</p> <pre><code>user@local:~$ mkdir /opt/tomcat/bin/setenv.sh     # create setenv.sh manually\nuser@local:~$ vim /opt/tomcat/bin/setenv.sh       # edit to set memory\n</code></pre> <p>content of <code>/opt/tomcat/bin/setenv.sh</code>:</p> <pre><code>CATALINA_OPTS=\"-Xmx{new allocated memory}\"\n</code></pre>"},{"location":"Memory-usage/","title":"Memory Usage","text":"<p>A few notes about memory usage</p>"},{"location":"Memory-usage/#introduction","title":"Introduction","text":"<p>This page provides essential information on how memory is utilized by BIMserver and offers guidance on optimizing memory settings.</p>"},{"location":"Memory-usage/#setup","title":"Setup","text":"<p>When you got a warning or error that your server is 'out of memory' you probably don't have enough HEAP size allocated. Increase your HEAP size (in console, in tomcat, in jetty, or whatever you use).  The necessary height of the HEAP is difficult to predict because it depends on the number of objects in your IFC model (and not on the size of the IFC file). We usually test with a 12Gb HEAP size server setup, but 220Gb servers are also known to be used by some people. </p>"},{"location":"Memory-usage/#berkeleydb-cache","title":"BerkeleyDB Cache","text":"<p>BerkeleyDB (the database engine the BIMserver uses) has a setting for the amount of heap memory it can use for caching (which will speedup reads), we have set it to 30%. So if you give your BIMserver 4GB of heap, it will soon be using more than 1GB of memory for caching. You can change this and other parameters only in the development setup or if you build your own version of BIMserver for production.</p> <p>See the BerkeleyDB documentation for more information.</p>"},{"location":"Memory-usage/#compressed-oops","title":"Compressed Oops","text":"<p>Running a 64bit system with less than 32GB of memory, you can use Compressed Oops (Ordinary Object Pointers). This feature reduces memory overhead, allowing for more efficient memory usage.</p> <p>Update: This is by default enabled on recent OpenJDK 6 and 7 implementations and onwards, so you probably won't have to do anything.</p>"},{"location":"Migrating-1.3-to-1.4/","title":"Migrating 1.3 to 1.4","text":"<p>...is not possible using the normal database upgrade scripts, e.a. is not automatic.</p> <p>However there is a way to get the most important data migrated, but it involves more manual work.</p> <ol> <li>Always make sure you backup first</li> <li>This type of migration requires both the old and new server runnning at the same time, obviously they have to be able to find each other on the network</li> <li>Make sure there is an admin account with the same name/password on both servers</li> <li>In your local environment (Eclipse for example), run TriggerImportDataRemote with the right arguments (see documentation in file). This call will end quickly, but starts the migration on the new server.</li> <li>Wait and read the logs of the new server</li> </ol> <p>This has only been tested once!</p>"},{"location":"Model-Compare-Plugin/","title":"Model Compare Plugin","text":"<p>A compare plugin basically provides the functionality to the BIMserver to compare 2 models. Comparing has been made pluggable because comparing models is a hard problem in programming and requirements vary a lot.</p>"},{"location":"Model-Compare-Plugin/#details","title":"Details","text":"<p>The plugin just has one method, which returns the actual ModelCompare instance.</p> <pre><code>public interface ModelComparePlugin extends Plugin {\n        ModelCompare createModelCompare(PluginConfiguration pluginConfiguration) throws ModelCompareException;\n}\n</code></pre> <p>The model compare instance looks like this:</p> <pre><code>public interface ModelCompare {\n        CompareResult compare(IfcModelInterface model1, IfcModelInterface model2, CompareType compareType) throws ModelCompareException;\n}\n</code></pre>"},{"location":"Model-Merge-Plugin/","title":"Model Merge Plugin","text":"<p>A model merge plugin basically provides the functionality to the BIMserver to merge 2 or more models. Merging has been made pluggable because merging  models is a hard problem in programming and requirements vary a lot.</p>"},{"location":"Model-Merge-Plugin/#details","title":"Details","text":"<p>The plugin just has one method, which returns the actual ModelMerger instance.</p> <pre><code>public interface ModelMergerPlugin extends Plugin {\n    ModelMerger createModelMerger(PluginConfiguration pluginConfiguration);\n}\n</code></pre> <p>The model merger instance looks like this:</p> <pre><code>public interface ModelMerger {\n    IfcModelInterface merge(Project project, IfcModelSet modelSet, ModelHelper modelHelper) throws MergeException;\n}\n</code></pre> <p>The returned IfcModelInterface must be a new instance. You cannot move/link objects in the given models in the new model. You have to copy them. The ModelHelper can help you with that. The given Project can be used for more information about the model (units for example). The IfcModelSet contains all the models that should be merged.</p>"},{"location":"New-query-langage/","title":"New query language","text":"<p>This was the design document, the actual implementation is documented here</p> <p>BIMserver has had several ways of querying the stored models, but none have been very useful so far. This page will describe the requirements of a new query language that should replace all the other ways of querying data.</p> <p>Requirements</p> <ul> <li>Should be easy to read/write, or easy to build higher-level languages on top of it</li> <li>Query by type (e.g. IfcDoor), with or without subtypes</li> <li>Query on exact values of fields (e.g. guid = \"FHAJJAJJH\", oid=20020)</li> <li>Use comparative expressions like &gt;, &lt;</li> <li>Use functions like substr etc...</li> <li>An efficient implementation should be possible (using indices, not loading the complete model in advance)</li> <li>Should basically be possible to create a query to get any sub-graph of any given model</li> <li>Should have the possibility to traverse a model (recursively)</li> <li>Should allow for having reusable pieces of query that are used a lot</li> <li>Should have the possibility to simplify for example the concept of Ifc properties via IfcPropertySet etc...</li> <li>It should be possible to \"overlay\" one query over another query. An example would be a model view definition, governing a specific view of the model, and a user querying within that domain.</li> <li>Programmatic extensibility, for complex query blocks</li> <li>Should at least be possible to have an idea of spatial queries</li> </ul>"},{"location":"New-query-langage/#possible-standardsinfluences","title":"Possible standards/influences","text":"<ul> <li>http://www.jsoniq.org/</li> <li>XQuery</li> <li>OQL</li> <li>GraphQL (intro + good description of why REST sucks: https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html)</li> </ul>"},{"location":"New-query-langage/#graphql","title":"GraphQL","text":"<p>Looks pretty cool. Main reasons for not choosing it:</p> <ul> <li>The actual query part seems to be quite limited, for example no range queries (&gt;, &lt;). We could implement \"oid\" and \"guid\" root calls server side. Maybe even as lists, and combined with type as well...</li> <li>Not only a new language, but also a new syntax, but there is a Java implementation of the parsing already (https://github.com/andimarek/graphql-java)</li> </ul>"},{"location":"New-query-langage/#other-considerations","title":"Other considerations","text":"<ul> <li>Will not be supplied as a plugin but integated in BIMserver. Code will be way to complex to support other \"query engines\" in a useful way.</li> </ul>"},{"location":"New-query-langage/#current-preload-query-in-bimviews","title":"Current preload query in BIMvie.ws","text":"<p>This is not very intuitive, but can be used to query a model quite precisely.</p> <p>The \"defines\" section declares reusable query-parts, the \"queries\" section the actual queries (which are all joined as OR)</p> <p>The first query get's all IfcProject objects (usually just one). For every IfcProject, 2 includes are traversed. \"IsDecomposedByDefine\" will follow the \"IsDecomposedBy\" field, for every object it will follow \"RelatedObjects\", it will then recursively call itself, and \"ContainsElementsDefine\" and \"Representation\". And so on... This will basically read the whole decomposes-tree, with some sidesteps.</p> <p>This example script is used in BIMvie.ws to preload the minimal amount of objects needed to create the tree/types/classifications/layers tabs on the left.</p> <pre><code>var preLoadQuery = {\n  defines: {\n    Representation: {\n      field: \"Representation\",\n    },\n    ContainsElementsDefine: {\n      field: \"ContainsElements\",\n      include: {\n        field: \"RelatedElements\",\n        include: [\n          \"IsDecomposedByDefine\",\n          \"ContainsElementsDefine\",\n          \"Representation\",\n        ],\n      },\n    },\n    IsDecomposedByDefine: {\n      field: \"IsDecomposedBy\",\n      include: {\n        field: \"RelatedObjects\",\n        include: [\n          \"IsDecomposedByDefine\",\n          \"ContainsElementsDefine\",\n          \"Representation\",\n        ],\n      },\n    },\n  },\n  queries: [\n    {\n      type: \"IfcProject\",\n      include: [\"IsDecomposedByDefine\", \"ContainsElementsDefine\"],\n    },\n    {\n      type: \"IfcRepresentation\",\n      includeAllSubtypes: true,\n    },\n    {\n      type: \"IfcProductRepresentation\",\n    },\n    {\n      type: \"IfcPresentationLayerWithStyle\",\n    },\n    {\n      type: \"IfcProduct\",\n      includeAllSubTypes: true,\n    },\n    {\n      type: \"IfcProductDefinitionShape\",\n    },\n    {\n      type: \"IfcPresentationLayerAssignment\",\n    },\n    {\n      type: \"IfcRelAssociatesClassification\",\n      include: [\n        {\n          field: \"RelatedObjects\",\n        },\n        {\n          field: \"RelatingClassification\",\n        },\n      ],\n    },\n    {\n      type: \"IfcSIUnit\",\n    },\n    {\n      type: \"IfcPresentationLayerAssignment\",\n    },\n  ],\n};\n</code></pre>"},{"location":"New-query-langage/#json-based-query-language","title":"JSON Based Query Language","text":"<p>Query on type</p> <pre><code>{\n  type: \"IfcProject\"\n}\n</code></pre> <p>Query on oid</p> <pre><code>{\n  oid: 12345\n}\n</code></pre> <p>Query on oids (OR)</p> <pre><code>{\n  oids: [12346, 56789]\n}\n</code></pre> <p>Query on GUID</p> <pre><code>{\n  guid: \"EBEBEBEBE\"\n}\n</code></pre> <p>Query on GUID's (OR)</p> <pre><code>{\n  guids: [\"EBEBEBEBEB\", \"CDCDCDCDCD\"]\n}\n</code></pre> <p>Using AND, OR, XOR</p> <pre><code>{\n  or: [{\n    type: \"IfcWall\"\n  }, {\n    type: \"IfcWallStandardCase\"\n  }]\n}\n</code></pre>"},{"location":"New-query-langage/#indices","title":"Indices","text":"<p>Right now, BIMserver allows for indices on String fields, but only for the \"Store\" model, this is the model that contains all the meta-data like Project, Revision, User etc... With these indices it's a lot quicker to for example get a User by username, or Project by name.</p> <p>This system will have to be extended for the IFC models and for more types.</p>"},{"location":"New-query-langage/#types","title":"Types","text":"<ul> <li>String, only exact matching for now, maybe add a case-insensitive one</li> <li>Integer, exact and comparative matching (=, &gt;, &gt;=, &lt;, &lt;=)</li> <li>Double, exact and comparative matching (=, &gt;, &gt;=, &lt;, &lt;=), have to look into the binary encoding of Java's double and weather it allows for lexicographic indexing</li> <li>Boolean, only exact matching (duh)</li> <li>References, to be determined</li> </ul>"},{"location":"New-query-langage/#revisions","title":"Revisions","text":"<p>The complicating factor for the IFC models is that those are versioned.</p>"},{"location":"New-query-langage/#when-to-index","title":"When to index","text":"<p>There are a few strategies</p> <ul> <li>Simply index everything (all types), this will slow down the write operations a lot, and also increase the database size.</li> <li>Add explicit indices to commonly queried fields in the code. Problem: how to determine the commonly queried fields. We could ask people to (automatically) share their query-patterns.</li> <li>Add dynamic indices based on usage pattern of a specific instance of BIMserver. This is the most complicated, although a very basic implementation (for example, just index every field that has ever been explicitly queried) should be possible.</li> </ul> <p>Because deleting objects should not happen too often, we just leave the indices (we need them for previous revisions anyways). When a deleted object has been found via an expired index (for that particular revision), we just treat it as if there was no index at all.</p>"},{"location":"New-query-langage/#to-figure-out","title":"To figure out","text":"<ul> <li>Do we want to be able to do queries over multiple projects? This has huge implication on the way indices are stored. For now I think no, user always has to provide the poid(s) and roid(s) that are to be queried.</li> </ul>"},{"location":"New-query-langage/#list-of-queries","title":"List of queries","text":"<ul> <li>Get all IfcTask objects that are planned between date X and Y and get the related objects (IfcTask.OperatesOn)</li> <li>Get all IfcTask objects that are planned between Project start and now and get the related objects (IfcTask.OperatesOn)</li> <li>Get all IfcTask objects that are planned for today and get the related objects (IfcTask.OperatesOn)</li> <li>Get all objects linked to a given task with name/id X</li> </ul>"},{"location":"New-remote-service-interface/","title":"New remote service interface","text":"<p>Content has been improved and moved to: https://github.com/opensourceBIM/BIM-Bot-services/wiki</p>"},{"location":"Object-IDMs/","title":"Object IDM","text":"<p>To give users and developers the possibility to tweak the objects included in serialized versions of models, the ObjectIDM concept has been introduced in version 1.1. In previous versions of the BIMserver a similar concept called IgnoreFile has been present but those have been superseded by the ObjectIDMs.</p>"},{"location":"Object-IDMs/#plugin","title":"Plugin","text":"<p>An ObjectIDM is a plugin for the BIMserver. This is the interface:</p> <pre><code>public interface ObjectIDM {\n\n    boolean shouldFollowReference(EClass originalClass, EClass eClass, EStructuralFeature eStructuralFeature);\n    boolean shouldIncludeClass(EClass eClass);\n}\n</code></pre>"},{"location":"Object-IDMs/#shouldfollowreference","title":"shouldFollowReference","text":"<p>This can be quite tricky though in essense you just have to return whether a certain reference should be followed or not. The eClass variable contains a reference to the EClass of the object that is currently being evaluated, the originalClass contains a reference to the EClass of the object that is originally queried:   * When getting an object by oid/guid this is the EClass of that object (not necessarily the currently being evaluated object!)   * For getAllOfType queries this will be the EClass of the queried type (actually the type of every found object which could technically be a subtype of the queried type)   * For all other cases including lazily loaded objects this is always the same as eClass</p>"},{"location":"Object-IDMs/#shouldincludeclass","title":"shouldIncludeClass","text":"<p>You simply decide whether the given eClass should be included or not.</p> <p>Example (include all furniture + geometry):</p> <pre><code>    @Override\n    public boolean shouldIncludeClass(EClass eClass) {\n        return !Ifc2x3Package.eINSTANCE.getIfcRoot().isSuperTypeOf(eClass) || eClass == Ifc2x3Package.eINSTANCE.getIfcFurnishingElement(); \n    }\n</code></pre> <p>Beware, in the previous example you cannot just return \"eClass == Ifc2x3Package.eINSTANCE.getIfcFurnishingElement()\" because only objects of type IfcFurnishingElement will be included but none of the other classes, so for example no geometry will be included.</p>"},{"location":"Object-IDMs/#for-non-developers","title":"For non-developers","text":"<p>For non-Java developers we have also created an XML based implementation of the ObjectIDM functionality. Checkout the FileBasedObjectIDM project in SVN.</p>"},{"location":"Object-IDMs/#objectidmxml","title":"objectidm.xml","text":"<p>The objectidm.xml file should be structured the following way:</p>"},{"location":"Object-IDMs/#packagedefinition","title":"PackageDefinition","text":"<p>Should be the root element | Name | Description | Required | Default value | | name | Name of the package | true | none |</p>"},{"location":"Object-IDMs/#classdefinition","title":"ClassDefinition","text":"<p>Child of PackageDefinition |Name | Description | Required | Default value | |name | Name of the class | true | none | |include||\"true\" or \"false\" (Include this class and all its subclasses or not)||false||\"true\"|| |defaultFollow||\"follow\" or \"ignore\" (Follow all references by default, Ignore all references by default) | false | \"follow\"| |followInverses | Whether to include inverse relations by default | false | \"false\" | |origin | This ClassDefinition element is only taken into account when the origin class is the same | false | none |</p>"},{"location":"Object-IDMs/#fielddefinition","title":"FieldDefinition","text":"<p>Child of ClassDefinition |Name | Description | Required | Default value | |name | Name of the field | true | none | |follow | \"true\" or \"false\" (Follow this reference, Ignore this reference) | false | \"true\" |</p> <p>When defining fields on a class, the settings for the fields apply to all subclasses of the given class, except when overridden in an explicitly defined subclass.</p> <p>Precedence rules:   * Explicitly defined ClassDefinitions will overrule the defaultInclude settings of PackageDefinition, so if PackageDefinition.defaultInclude = \"exclude\" and a ClassDefinition is created with no \"include\" attribute, it wil still be included because the default value of the include attribute within ClassDefinition is \"true\"</p> <p>Examples (note: All redundant and optional attributes have been omitted)</p> <p>Example 1 (include all types, do not follow the \"LayerAssignments\" and \"StyledByItem\" references from \"Ifc2DCompositeCurve\" and it's descendents)</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt; \n&lt;PackageDefinition name=\"Ifc2x3\"&gt;\n    &lt;ClassDefinition name=\"Ifc2DCompositeCurve\"&gt;\n        &lt;FieldDefinition name=\"LayerAssignments\" follow=\"false\"/&gt;\n        &lt;FieldDefinition name=\"StyledByItem\" follow=\"false\"/&gt;\n    &lt;/ClassDefinition&gt;\n&lt;/PackageDefinition&gt;\n</code></pre> <p>Example 2 (include no types except IfcProject and IfcOwnerHistory, follow all references from both types, most won't be followed by the way because the types are not included)</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt; \n&lt;PackageDefinition name=\"Ifc2x3\" defaultInclude=\"exclude\"&gt;\n    &lt;ClassDefinition name=\"IfcProject\"/&gt;\n    &lt;ClassDefinition name=\"IfcOwnerHistory\"/&gt;\n&lt;/PackageDefinition&gt;\n</code></pre> <p>Example 3 (This is the default in the BIMserver) By default all inverses are ignored, but only the HasOpenings reference of IfcElement (and its descendents) will be followed. Also the (inverse) references \"IsDecomposedBy\" and \"ContainsElements\" will be followed on every class that has them ONLY IF the origin class equals - or is a subclass of - \"IfcBuildingStorey\"</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt; \n&lt;PackageDefinition name=\"Ifc2x3\"&gt;\n    &lt;ClassDefinition name=\"IfcElement\"&gt;\n        &lt;FieldDefinition name=\"HasOpenings\" follow=\"true\"/&gt;\n    &lt;/ClassDefinition&gt;\n    &lt;ClassDefinition name=\"IfcObjectDefinition\" origin=\"IfcBuildingStorey\"&gt;\n        &lt;FieldDefinition name=\"IsDecomposedBy\" follow=\"true\"/&gt;\n    &lt;/ClassDefinition&gt;\n    &lt;ClassDefinition name=\"IfcSpatialStructureElement\" origin=\"IfcBuildingStorey\"&gt;\n        &lt;FieldDefinition name=\"ContainsElements\" follow=\"true\"/&gt;\n    &lt;/ClassDefinition&gt;\n&lt;/PackageDefinition&gt;\n</code></pre>"},{"location":"ObjectIDM-Plugin/","title":"ObjectIDM Plugin","text":"<p>An ObjectIDM helps BIMserver to decide whether to follow a relation/reference or not and whether to include/exclude certain classes. This can be used to define subsets of models, based on a given starting point.</p> <pre><code>public interface ObjectIDMPlugin extends Plugin {\n    ObjectIDM getObjectIDM(PluginConfiguration pluginConfiguration);\n}\n</code></pre> <pre><code>public interface ObjectIDM {\n    boolean shouldFollowReference(EClass originalClass, EClass eClass, EStructuralFeature eStructuralFeature);\n    boolean shouldIncludeClass(EClass originalClass, EClass eClass);\n}\n</code></pre>"},{"location":"Outgoing-internet-connection/","title":"Outgoing internet connection","text":"<p>BIMserver (&gt; 1.5) needs a working outgoing internet connection for the following purposes.</p> <p>Note: If you don't have a working outgoing internet connection, have a look here</p>"},{"location":"Outgoing-internet-connection/#updatinginstalling-plugins","title":"Updating/installing plugins","text":"<p>Address: http://central.maven.org/maven2</p>"},{"location":"Outgoing-internet-connection/#sending-triggers-to-other-servers-optional","title":"Sending triggers to other servers (optional)","text":"<p>It will need HTTP connectivity to the servers you select</p>"},{"location":"Outgoing-internet-connection/#extended-data-schemas-optional","title":"Extended Data Schemas (optional)","text":"<p>To load a list of known extended data schemas BIMserver will fetch a JSON file from the default repository. The URL: [Repository Location]/extendeddataschemas.json</p> <p>The default value for the repository is https://raw.githubusercontent.com/opensourceBIM/BIMserver-Repository/master, but you can change this in server settings.</p> <p>Alternative: Install extended data schemas by hand, BIMvie.ws provides a GUI to do so.</p>"},{"location":"PHP-Client-Library/","title":"Introduction","text":"<p>Example file</p> <p>TODO: More documentation</p> <p>Make sure you enable the following modules: * Apache mod rewrite * PHP curl * PHP short open tag</p>"},{"location":"Performance-statistics/","title":"Performance statistics","text":"<p>Used machine:</p> <p>Intel Core i7 6700K @ 4GHz Window 10 32GB DDR4, 2400MHz, 24GB assigned to BIMserver Samsung SSD (m.2)</p> Date Unzipped IFC File Size Time (s) Max Memory Database size Result 29-10-2015 3.7GB Long 25GB Unknown Did not finish (stopped during deserialization, Java heap space)"},{"location":"Plugin-Development/","title":"Introduction","text":"<p>The BIMserver project has a strong focus on interaction with other systems, that's what the Service Interfaces are for (accessible via SOAP, Protocol Buffers or JSON). However, some logic will only work (efficiently) when running within the BIMserver, that's where plugins come into play.</p>"},{"location":"Plugin-Development/#types-of-plugins","title":"Types of plugins","text":"<p>All plugins implement the Plugin interface:</p> <pre><code>public interface Plugin {\n    void init(PluginManager pluginManager) throws PluginException; // Initialization code, if your plugin requires other plugins, this is the time to check for them, be sure to throw a PluginException when something is wrong\n    String getName(); // A short name of this plugin\n    String getDescription(); // A short description of this plugin\n    String getVersion(); // A version, not used for dependencies (yet)\n    boolean isInitialized(); // Should return whether this plugin is successfully initialized\n}\n</code></pre> <p>Do not implement the Plugin class directly, there are sub-interfaces for the different purposes plugins can have.</p>"},{"location":"Plugin-Development/#types-of-plugins_1","title":"Types of plugins","text":"Name Functionality Serializer Create a serialized version of a model (can be text or binary) Deserializer Parse a serialized version of a model and store it in the database Render Engine Triangulates IFC geometry Query Engine Provides a way of querying a model Schema Provides the BIMserver with metadata about the models Object IDM Provides the BIMserver with a way of traversing objects Model Merge Merge multiple models into one model Model Compare Compare 2 models Service Services can be triggered by certain events"},{"location":"Plugin-Development/#so-how-to-develop-a-plugin","title":"So how to develop a plugin","text":"<p>This tutorial assumes you use eclipse, but other IDEs should also work</p> <p>The easiest way to learn is to look how other people have done things, there are quite a few plugins already, so have a look at them.</p> <ul> <li>Create a new java project for your plugin, for example <code>PluginTest</code></li> <li>Create your plugin class, this class must implement the plugin interface you want to write a plugin for, make sure you implement all methods correctly. For this example we will create a serializer and we will name the plugin <code>TestSerializerPlugin</code> in the package <code>test</code>.</li> <li>Create a plugin folder under your project</li> <li>Create a plugin.xml file under the plugin folder, the content should like like this:</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;PluginDescriptor&gt;\n    &lt;PluginImplementation&gt;\n        &lt;interfaceClass&gt;org.bimserver.plugins.serializers.SerializerPlugin&lt;/interfaceClass&gt;\n        &lt;implementationClass&gt;test.TestSerializerPlugin&lt;/implementationClass&gt;\n        &lt;enabled&gt;true&lt;/enabled&gt;\n    &lt;/PluginImplementation&gt;\n&lt;/PluginDescriptor&gt;\n</code></pre> <p>Now to test your plugin locally you will have to tell the BIMserver where your plugin can be found. Edit <code>LocalDevPluginLoader.java</code> and look for the lines with <code>loadPluginFromEclipseProject</code>. Add</p> <pre><code>pluginManager.loadPluginsFromEclipseProject(new File(\"../PluginTest\"));\n</code></pre> <p>Now you can start the BIMserver and your plugin should be available as yet another way to serialize models.</p>"},{"location":"Plugin-Development/#jar","title":"JAR","text":"<p>To make your plugin available on deployed BIMservers (either WAR or JAR), you have to create a JAR file of your plugin. It should contain the compiled code, your plugin folder (+plugin.xml), and any required JAR files. The place of jar files doesn't matter, as long as they have the extension \".jar\".</p>"},{"location":"Plugin-Development/#license","title":"License","text":"<p>BIMserver is an open framework that uses Plugins. Derivatives of bimserver.org code inherit the Affero GPL code. Plugins build from scratch can also be licensed under the GPL license (and used as plugin in BIMserver). This does not go for snippets, GUIs and some separate (or remote) running services where BIMserver is a client to that service. Again: when in doubt, feel free to contact us. More details and examples on http://bimserver.org/license/</p>"},{"location":"Plugin-problems/","title":"Plugin problems","text":"<p>This page aims to explain the problems that we had with the plugin system so far, and how we hope to solve this in the (developer) releases after 1.5.108.</p> <p>From version 1.5.108 on, strict plugin checking is enabled by default. What this means is that plugins have to be built for a specific version of BIMserver. Only plugins built for the exact BIMserver version you are using will be allowed to be installed.</p> <p>A quick side note: When installing plugins via the API (or BIMvie.ws), this strict checking applies since version 1.5.108. For the initial setup of a BIMserver this check was added in version 1.5.111.</p> <p>This fixes 2 known problems: - People that downloaded/installed a version of BIMserver a while ago would be tempted to upgrade installed plugins as new versions of plugins became available. Those plugins however were in most cases not compatible with the older version of BIMserver. There was no way to know this up-front. This also went wrong when settings up a new (but older) BIMserver, the setup process would simply download the latest version of each plugin. - People that downloaded the newest version of BIMserver would see all kinds of plugins to be available, some of them more than a year old (some more than 2 years old!). These plugins usually don't work anymore since nobody is maintaining them.</p> <p>This also introduces a few new problems, but hopefully less annoying ones: - A smaller amount of plugins is usually available shortly after a new BIMserver release, since new builds have to be made for all plugins, linked specifically to this version of BIMserver</p>"},{"location":"Plugin-problems/#so-how-is-this-better-than-before-the-plugin-system-was-added","title":"So how is this better than before the plugin system was added?","text":"<p>Before the plugin system was implemented in BIMserver, all (what are now plugins) functionality was embedded in BIMserver itself. An important reason for introducing a plugin system was that we wanted a smaller core system, where we could do bugfixes etcetera of the plugins without releasing a new version of BIMserver.</p> <p>This is still possible. A developer of a plugin can release a new version with bugfixes. When a plugin developer is sure that multiple versions of BIMserver are compatible with a new version, a Maven-specific dependency can be added. For example works with all versions between 1.5.106(inc) and 1.5.108(inc):</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.opensourcebim&lt;/groupId&gt;\n    &lt;artifactId&gt;pluginbase&lt;/artifactId&gt;\n    &lt;version&gt;[1.5.106, 1.5.108]&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"Plugins---New/","title":"Plugins new","text":"<p>Just thinking out load how plugins should be working.</p> <ul> <li>BIMserver should come with no plugins at all, everything that cannot be missed, should be in BIMserver anyways</li> <li>Plugins should be on github releases, or any other downloadable URL</li> <li>Every plugin should have someone responsible for maintaining the plugin, testing with different BIMserver versions and making releases</li> <li>Plugin repositories should aggregate links to those plugins, there should be 1 main repository (maintained by BIMserver developers), but uses should be able to setup other repositories</li> <li>Github looks like a good place for a repository</li> <li>WebModule plugins should have no Java code at all, configration should be done with json files, this makes the build process easier for plugin developers. All web modules should also be able to run on a remote host of course.</li> <li>Already an open issue for a long time: Plugins should be running in a sandboxed environment</li> <li>There should be a \"template\" project developers can use to start with, which includes build scripts and script for uploading releases to github</li> </ul>"},{"location":"Plugins---New/#dependencies","title":"Dependencies","text":"<p>This is where stuff gets complicated. We make a distinction between WebModule plugins and Java-based plugins.</p>"},{"location":"Plugins---New/#java-based-plugins","title":"Java-based plugins","text":"<p>For example the COBie plugin has dependencies on a separate Java project. This should work in Eclipse (when developing), but also when the plugin is running on a deployed server. - Will dependencies be included in dependant plugins, or will they simply require the dependency-plugin to be available (and should BIMserver go and get it)? - What happens when multiple plugins have the same dependencies? Load them multiple times?</p> <ul> <li>How to build plugins? They all depend on \"Shared\". Should we automatically download a specific version of \"shared.jar\" and compile agains that? Or checkout a specific revision/part of BIMserver? It's probably a good idea to make a minimal \"shared.jar\", it's including way too much at the moment. Looks like maven might actually be a good choice for this.</li> </ul>"},{"location":"Plugins---New/#webmodule-plugins","title":"WebModule plugins","text":"<p>Those have been added to BIMserver mainly for development ease, but have been used on deployments a lot as well (you don't need a separate webserver).</p> <ul> <li>WebModule plugins should work fine in development-mode, all source files should be individual and non-minified</li> <li>WebModule plugins should be optimized in deployment (we use grunt for this)</li> <li>WebModule plugins can have dependencies, we will manage those with package.json, but how will Eclipse/IDE be able to download those dependencies?</li> <li>Ideally we don't want to have to do releases of dependencies (for example BIMserver JavaScript API) in order to use changed code in for example BIMvie.ws, while developing</li> <li>We don't want any submodules as they are a pain in the ass in this usecase</li> <li>The BIMserver JavaScript API specifically should also work on NodeJS</li> </ul>"},{"location":"Plugins---new-style/","title":"Plugins in 1.5","text":"<p>For the BIMserver 1.5 release, plugins have changed quite a bit.</p> <p>For starters they depend on maven now. In the long term the plan is to also support non-maven plugins, but for now it's a requirement. To make the transition for older plugins easier, and to help developers of new plugins, this document describes how it works.</p> <p>BIMserver specific terminology: - Plugin: A plugin (implementing org.bimserver.plugins.Plugin) - PluginBundle: A collections of 1 or more plugins, for example the org.opensourcebim.ifcplugins bundle has 18 plugins, but a lot of bundles only have 1 (for example org.opensourcebim.ifcopenshellplugin)</p>"},{"location":"Plugins---new-style/#create-a-maven-project","title":"Create a maven project","text":"<p>Most Java IDEs should support this. There should be one pom.xml file per plugin bundle. In the next section all required parts in the pom.xml will be described, most of them are enforced by maven(relase plugin), ans some by BIMserver pluginmanagement.</p>"},{"location":"Plugins---new-style/#pomxml","title":"pom.xml","text":"<pre><code>&lt;groupId&gt;org.opensourcebim&lt;/groupId&gt;\n</code></pre> <p>For most plugins for bimserver this is org.opensourcebim, but this can be anything of course, make sure to use lowercase, which is the convention</p> <pre><code>&lt;artifactId&gt;ifcplugins&lt;/artifactId&gt;\n</code></pre> <p>This should describe your plugin bundle, also make sure it is lowercase</p> <pre><code>&lt;version&gt;0.0.8-SNAPSHOT&lt;/version&gt;\n</code></pre> <p>Make sure your version on SCM always ends in -SNAPSHOT and releases always omit -SNAPSHOT</p> <pre><code>&lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n&lt;/properties&gt;\n</code></pre> <p>This is just to make sure build results are repeatable on different platforms</p> <pre><code>&lt;description&gt;BIMserver plugin that uses IfcOpenShell to generate geometry from IFC files&lt;/description&gt;\n</code></pre> <p>A description for the whole bundle.</p> <pre><code>    &lt;scm&gt;\n        &lt;url&gt;https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin.git&lt;/url&gt;\n        &lt;connection&gt;scm:git:https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin.git&lt;/connection&gt;\n        &lt;developerConnection&gt;scm:git:https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin.git&lt;/developerConnection&gt;\n    &lt;/scm&gt;\n</code></pre> <p>This is used by the maven release plugin to push/pull to the SCM.</p> <pre><code>    &lt;organization&gt;\n        &lt;name&gt;OpenSource BIM&lt;/name&gt;\n        &lt;url&gt;opensourcebim.org&lt;/url&gt;\n    &lt;/organization&gt;\n</code></pre> <p>Some information about the organization, of course you should fill in the details about your organization.</p> <pre><code>    &lt;issueManagement&gt;\n        &lt;system&gt;GitHub&lt;/system&gt;\n        &lt;url&gt;https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin/issues&lt;/url&gt;\n    &lt;/issueManagement&gt;\n</code></pre> <pre><code>    &lt;name&gt;IfcOpenShellPlugin&lt;/name&gt;\n</code></pre> <pre><code>    &lt;url&gt;https://github.com/opensourceBIM/IfcOpenShell-BIMserver-plugin&lt;/url&gt;\n</code></pre> <pre><code>    &lt;licenses&gt;\n        &lt;license&gt;\n            &lt;name&gt;GNU Affero General Public License&lt;/name&gt;\n            &lt;url&gt;http://www.gnu.org/licenses/agpl-3.0.en.html&lt;/url&gt;\n            &lt;distribution&gt;repo&lt;/distribution&gt;\n        &lt;/license&gt;\n    &lt;/licenses&gt;\n</code></pre> <pre><code>    &lt;developers&gt;\n        &lt;developer&gt;\n            &lt;email&gt;ruben@logic-labs.nl&lt;/email&gt;\n            &lt;name&gt;Ruben de Laat&lt;/name&gt;\n        &lt;/developer&gt;\n    &lt;/developers&gt;\n</code></pre>"},{"location":"Plugins---new-style/#_1","title":"Plugins in 1.5","text":""},{"location":"Problems-parsing-IFC/","title":"Parsing strings","text":"<p>The STEP specification on Strings is not clear on the following. The order of parsing all the variants of alternative encodings is not defined. For example the following string could be parsed in 2 ways:</p> <pre><code>\\S\\X\\S\\r\\S\\s\\S\\j\n</code></pre> <pre><code>\\S\\X\n\\S\\r\n\\S\\s\n\\S\\j\n</code></pre> <p>OR</p> <pre><code>\\S\n\\X\\S\\\nr\n\\S\\s\n\\S\\j\n</code></pre> <p>Which will result in an error because the 2 characters following the \\X\\ are not numeric.</p>"},{"location":"Problems-with-querying-IFC/","title":"Problems querying IFC","text":"<p>When querying an IFC model, a hard question to answer is which information to give back. For example, a user might want to query all IfcDoor objects. Independent of the query language used, what should this query return? If it only returns IfcDoor objects, the results are not very useful (all references will be empty). So we probably want a little more. For example the properties of the object, but maybe also the geometry. Now geometry is already an interesting topic.</p> <p>In short, the query should not only define how to query the objects, but also how far it should go following references to include in the results.</p>"},{"location":"Problems-with-querying-IFC/#geometry","title":"Geometry","text":"<p>To get the positions of the objects right, we usually have to follow a path of IfcObjectPlacement objects. Doors for example are usually positioned relative to the walls they are a part of. But we don't want the Walls. So the only solution would be to internalize/accumulate the positions.</p>"},{"location":"Protocol-Buffers/","title":"Protocol Buffers","text":"<p>Protocol Buffers is one of the three available channels to access the methods of the Service Interfaces.</p>"},{"location":"Protocol-Buffers/#introduction","title":"Introduction","text":"<p>As the BIMserver's main function is to allow other software to store and retrieve information about building information models, it is very important to support a wide variety of programming languages. From the beginning of the BIMserver project a SOAP interface has been available, but SOAP has a few disadvantages:</p> <ul> <li>SOAP is XML based, which makes it slower/larger</li> <li>Almost every SOAP stack interprets the standards a little different</li> <li>A lot of diversions/extensions are available, excluding certain soap clients</li> </ul> <p>For these reasons another interface has been implemented: Protocol Buffers.</p> <p>The Protocol Buffers API maps all the functions available in the services [LINK], so the actual calls will not be described in this document.</p>"},{"location":"Protocol-Buffers/#proto-file","title":"Proto file","text":"<p>The .proto file can be downloaded from a running BIMserver. Go to the \"Info\" page and click on the \"Web Services\" tab, then download the \"Protocol Buffers Descriptor File\". With this .proto file you can generate the service interface and messages for a wide range of programming languages, please check out the Protocol Buffers website for more details.</p>"},{"location":"Protocol-Buffers/#bimserver-specific","title":"BIMserver Specific","text":"<p>The \"service interface\" methods are not available in the Protocol Buffers API as-is because PB does have some limitations.</p> <p>All service calls in Protocol Buffers allow only 1 parameter and 1 return type, for this reason the BIMserver generates specific \"Request\" and \"Response\" messages for every call. For example the <code>login</code> method uses the <code>LoginRequest</code> message as input parameter, and the <code>LoginResponse</code> message as the return type.</p>"},{"location":"Protocol-Buffers/#request-messages","title":"Request Messages","text":"<p>All request messages contain the same amount of fields as there are parameters in the service call. So for the login method, the <code>LoginRequest</code> message contains 2 fields: <code>username</code> and <code>password</code>, both of type <code>string</code>.</p>"},{"location":"Protocol-Buffers/#response-messages","title":"Response Messages","text":"<p>All response messages contain 2 fields. The first field is the <code>errorMessage</code> field of type <code>string</code>. This field always contains <code>\"OKE\"</code> if the call succeeded, or something else describing the error if the call did not succeed. The reason for this construction is the fact that Protocol Buffers does not support Exceptions, but the \"service interface\" does throw them. The BIMserver converts the exceptions thrown to errorMessage values.</p> <p>The second field is the actual return value. This is always the same value as in the ServiceInterface, or unset if an error occured. The special <code>Void</code> type is used for return-type-less methods.</p>"},{"location":"Protocol-Buffers/#rpc","title":"RPC","text":"<p>Protocol Buffers is only a message format, the actual transport method can be chosen by the developer. We have chosen to use Protobuf Socket RPC. This implementation only provides a Java and Python version for now, but as the implementation is pretty straight-forward other languages could be used without too much hassle.</p>"},{"location":"Query-Engine-Plugin/","title":"Query Engine Plugin","text":"<p>A Query Engine makes it possible for users to query the BIMserver models.</p> <pre><code>public interface QueryEnginePlugin extends Plugin {\n    /**\n     * @return A usable QueryEngine implementation\n     */\n    QueryEngine getQueryEngine(PluginConfiguration pluginConfiguration);\n\n    /**\n     * @return Return a list of keys (usually file names) corresponding to code examples for this plugin\n     */\n    Collection&lt;String&gt; getExampleKeys();\n\n    /**\n     * @param key\n     * @return Return the code example for the given key\n     */\n    String getExample(String key);\n}\n</code></pre> <pre><code>public interface QueryEngine {\n    /**\n     * @param model The complete model\n     * @param code The query, represented as a string\n     * @return RunResult\n     */\n    IfcModelInterface query(IfcModelInterface model, String code, Reporter reporter, ModelHelper modelHelper) throws QueryEngineException;\n}\n</code></pre>"},{"location":"Render-Engine-Plugin/","title":"Render Engine Plugin","text":"<p>A Render Engine makes it possible to convert an IFC file to triangulated geometry.</p> <pre><code>public interface RenderEnginePlugin extends Plugin {\n    RenderEngine createRenderEngine(PluginConfiguration pluginConfiguration) throws RenderEngineException;\n}\n</code></pre> <pre><code>public interface RenderEngine {\n    RenderEngineModel openModel(File ifcFile) throws RenderEngineException;\n    RenderEngineModel openModel(InputStream inputStream, int size) throws RenderEngineException;\n    RenderEngineModel openModel(byte[] bytes) throws RenderEngineException;\n    void close() throws RenderEngineException;\n    void init() throws RenderEngineException;\n}\n</code></pre>"},{"location":"Reorganizing-bimserverapi.js/","title":"Current state","text":"<ul> <li>One big JS file and 2 ifcschema files</li> </ul>"},{"location":"Reorganizing-bimserverapi.js/#idea-for-new-version","title":"Idea for new version","text":"<ul> <li>All \"classes\" in separate files</li> <li>Use requirejs for dependency loading</li> <li>Create a build script that concatenates(/minifies) all JS (and CSS)</li> <li>Should also work without the build script, useful for debugging</li> <li>Remove jquery dependency</li> <li>Add JSDOC</li> </ul>"},{"location":"Reorganizing-bimserverapi.js/#next-step","title":"Next step","text":"<ul> <li>Build on the same structure for new bimsurfer version and bimvie.ws</li> </ul>"},{"location":"Requirements-1.2/","title":"Version 1.2","text":"<p>System requirements for running a BIMserver version 1.2</p>"},{"location":"Requirements-1.2/#memory","title":"Memory","text":"<p>The amount of required heap memory depends on what plugins you install, the size of your models and the amount of concurrent users of BIMserver. A rule of thumb is that you need about 15 times the size of the largest (unzipped) IFC file you want to be able to upload, times the maximum number of concurrent users. You can find more information here.</p>"},{"location":"Requirements-1.2/#jre-jdk","title":"JRE / JDK","text":"<p>You can download a JRE or JDK here.</p> <p>Make sure you install a 64bit JRE/JDK if you have a 64bit system. The main advantage will be that you are going to be able to reserve more than 1300MB of memory, which you probably will want to.</p> <p>For advanced queries you will need to use a JDK, for all other features a JRE will suffice.</p>"},{"location":"Requirements-1.2/#war","title":"WAR","text":"<ul> <li>A JRE or JDK 6, update 4 or higher</li> <li>A Servlet Specification 3.0 or higher based Container with WebSocket support (Tomcat 7.0.27 or higher, Jetty 8 or higher)</li> </ul>"},{"location":"Requirements-1.2/#jar","title":"JAR","text":"<ul> <li>A JRE or JDK 6, update 4 or higher</li> </ul> <p>Explanation:</p> <ul> <li>A JRE or JDK version 6 update 4 or higher is required because the BIMserver makes extensive use of JAXB 2.1.3, which only JREs and JDKs after update 4 have a reference implementation of</li> <li>The BIMserver makes use of WebSockets, which are not a standard yet, but they are implemented in Jetty 8 and Tomcat 7 (you will need to have 7.0.27 at least)</li> </ul>"},{"location":"Requirements-1.3/","title":"Version 1.3","text":"<p>System requirements for running a BIMserver version 1.3</p>"},{"location":"Requirements-1.3/#memory","title":"Memory","text":"<p>The amount of required heap memory depends on what plugins you install, the size of your models and the amount of concurrent users of BIMserver. A rule of thumb is that you need about 15 times the size of the largest (unzipped) IFC file you want to be able to upload, times the maximum number of concurrent users. You can find more information here.</p>"},{"location":"Requirements-1.3/#jre-jdk","title":"JRE / JDK","text":"<p>You can download a JRE or JDK here.</p> <p>Make sure you install a 64bit JRE/JDK if you have a 64bit system. The main advantage will be that you are going to be able to reserve more than 1300MB of memory, which you probably will want to.</p> <p>For advanced queries you will need to use a JDK, for all other features a JRE will suffice.</p>"},{"location":"Requirements-1.3/#war","title":"WAR","text":"<ul> <li>A JRE or JDK 7</li> <li>A Servlet Specification 3.0 or higher based Container with WebSocket support (Tomcat 7.0.27 or higher, Jetty 8 or higher)</li> </ul>"},{"location":"Requirements-1.3/#jar","title":"JAR","text":"<ul> <li>A JRE or JDK 7</li> </ul>"},{"location":"Requirements-1.4---2015-09-12/","title":"Version 1.4 (2015-09-12)","text":"<p>System requirements for running a BIMserver version 1.4 starting with https://github.com/opensourceBIM/BIMserver/releases/tag/1.4.0-FINAL-2015-09-12</p> <p>Before this build there were separate releases for Tomcat 7 and Tomcat 8, this was unmaintainable, hence the updated requirements.</p>"},{"location":"Requirements-1.4---2015-09-12/#memory","title":"Memory","text":"<p>The amount of required heap memory depends on what plugins you install, the size of your models and the amount of concurrent users of BIMserver. A rule of thumb is that you need about 15 times the size of the largest (unzipped) IFC file you want to be able to upload, times the maximum number of concurrent users. You can find more information here.</p>"},{"location":"Requirements-1.4---2015-09-12/#jre-jdk","title":"JRE / JDK","text":"<p>You can download a JRE or JDK here.</p> <p>Make sure you install a 64bit JRE/JDK if you have a 64bit system. The main advantage will be that you are going to be able to reserve more than 1300MB of memory, which you probably will want to.</p> <p>For advanced queries you will need to use a JDK, for all other features a JRE will suffice.</p>"},{"location":"Requirements-1.4---2015-09-12/#war","title":"WAR","text":"<ul> <li>A JRE or JDK 7</li> <li>A Servlet Specification 3.0 or higher based Container with WebSocket JSR-356 (1.1) support (Tomcat 7.0.56 or higher, Tomcat 8, Jetty 8 or higher)</li> </ul>"},{"location":"Requirements-1.4---2015-09-12/#jar","title":"JAR","text":"<ul> <li>A JRE or JDK 7</li> </ul>"},{"location":"Requirements-1.4/","title":"Version 1.4","text":"<p>System requirements for running a BIMserver version 1.4</p>"},{"location":"Requirements-1.4/#memory","title":"Memory","text":"<p>The amount of required heap memory depends on what plugins you install, the size of your models and the amount of concurrent users of BIMserver. A rule of thumb is that you need about 15 times the size of the largest (unzipped) IFC file you want to be able to upload, times the maximum number of concurrent users. You can find more information here.</p>"},{"location":"Requirements-1.4/#jre-jdk","title":"JRE / JDK","text":"<p>You can download a JRE or JDK here.</p> <p>Make sure you install a 64bit JRE/JDK if you have a 64bit system. The main advantage will be that you are going to be able to reserve more than 1300MB of memory, which you probably will want to.</p> <p>For advanced queries you will need to use a JDK, for all other features a JRE will suffice.</p>"},{"location":"Requirements-1.4/#war","title":"WAR","text":"<ul> <li>A JRE or JDK 7</li> <li>A Servlet Specification 3.0 or higher based Container with WebSocket support (Tomcat 7.0.27 or higher, Jetty 8 or higher)</li> </ul>"},{"location":"Requirements-1.4/#jar","title":"JAR","text":"<ul> <li>A JRE or JDK 7</li> </ul>"},{"location":"Requirements-1.5/","title":"Version 1.5","text":"<p>System requirements for running a BIMserver version 1.5:</p> <ul> <li>A working (outgoing) internet connection (from your BIMserver). BIMserver needs this in order to</li> <li>Install plugins that are hosted on the internet</li> <li>Send emails (via SMTP)</li> <li>Connect to other BIMservers (for example when running remote services)</li> <li>A working (incoming) internet connection (to allow other people to connect)</li> <li>Disk (to store the database, logs, plugins etc...)</li> <li>Java 8 (or higher)</li> </ul>"},{"location":"Requirements-1.5/#memory","title":"Memory","text":"<p>The amount of required heap memory depends on what plugins you install, the size of your models and the amount of concurrent users of BIMserver. A rule of thumb is that you need about 15 times the size of the largest (unzipped) IFC file you want to be able to upload, times the maximum number of concurrent users. You can find more information here.</p>"},{"location":"Requirements-1.5/#jre-jdk","title":"JRE / JDK","text":"<p>JRE allows you to run Java applications on your computer, including includes Java Virtual Machine (JVM), core libraries, and other components to run applications written in Java.</p> <p>JDK allows you to write and compile your own Java programs, including JRE, javac, debugger, and other necessary Java development tools.</p> <p>You can download a JRE or JDK here.</p> <p>Make sure you install a 64bit JRE/JDK if you have a 64bit system. The main advantage will be that you are going to be able to reserve more than 1300MB of memory, which you probably will want to.</p> <p>For advanced queries you will need to use a JDK, for all other features a JRE will suffice.</p>"},{"location":"Requirements-1.5/#war","title":"WAR","text":"<p>WAR is a package used to distribute and deploy web applications.</p> <p>Requirements for using WAR files:</p> <ul> <li>A JRE or JDK 8</li> <li>A Servlet Specification 3.0 or higher based Container with WebSocket support (Tomcat 8 or higher, Jetty 8 or higher)</li> </ul> <p>See also</p>"},{"location":"Requirements-1.5/#jar","title":"JAR","text":"<p>JAR is a package file format used to aggregate many Java files and connected metadata and resources into one file for distribution. Read more about JAR here.</p> <p>Requirements for using JAR files:</p> <ul> <li>A JRE or JDK 8</li> </ul>"},{"location":"Reusable-query-Contains/","title":"Contains","text":"<p>This is a reusable query block that traverses through the \"contains\" relations.</p> <p></p>"},{"location":"Reusable-query-Decomposes/","title":"Decomposes","text":"<p>This is a reusable query block that traverses through the \"decomposes\" relations.</p> <p></p>"},{"location":"Reusable-query-DecomposesContains/","title":"DecomposesContains","text":"<p>This is a reusable query block that traverses through the \"decomposes\" and \"contains\" relations. This block reuses Decomposes and Contains</p> <p></p>"},{"location":"Reusable-query-Properties/","title":"Properties","text":"<p>This is a reusable query block that traverses through the properties of an object.</p> <p></p>"},{"location":"Reusable-query-blocks/","title":"Reusable","text":"<p>Reusable query blocks can be used to simplify query building and to make them more readable.</p> <p>IFC is a complex schema, and uses a lot of relation objects, traversing them can be easier by using reusable query blocks.</p> <p>Elements of a reusable query block:</p> <ul> <li>IN</li> <li>Initial type query (right after IN), selects the types it can work with, basically determines that allowed IN connections</li> <li>OUT</li> </ul>"},{"location":"Reusable-query-blocks/#list-of-reusable-query-blocks","title":"List of reusable query blocks","text":"<ul> <li>Decomposes</li> <li>Contains</li> <li>DecomposesContains</li> <li>Properties</li> </ul>"},{"location":"Roadmap/","title":"Roadmap","text":"<p>This is just a proposal, lots of changes expected</p> <p>September 2015</p> <ul> <li>Create roadmap</li> <li>Standardize on topicId, downloadId, laid, longActionId etc... and document</li> <li>Create calls to get information about \"background\" processes, also implement in BIMvie.ws</li> <li>Extend Metrics with percentile info and more</li> <li>Write more documentation (maybe work on scenarios)</li> <li>Write a test that creates a 100GB database</li> </ul> <p>Oktober 2015</p> <ul> <li>Convert to maven, publish on maven repository</li> <li>Load plugins on first use, to improve startup-time and memory consumption</li> <li>Maybe don't unpack JAR's on disk for plugins</li> <li>Setup a plugin repository (possibly using maven)</li> <li>Move non-essential plugins to different git repositories</li> <li>Deprecate code that will be removed</li> <li>Remove Bimsie1 namespace from all code (also update bimserverapi.js, BIMvie.ws, BIMsurfer etc...)</li> </ul> <p>November 2015</p> <ul> <li>Remove query-plugin extensionpoint</li> <li>Implement indices for model-data</li> <li>Move GUID/Name indices to generic indexing system</li> <li>Implement useful query method, replace current query methods with New-query-language</li> </ul> <p>December 2015</p> <ul> <li>Remove deprecated code</li> <li>Add get/list/read methods to low level interface, remove data object calls</li> <li>Notifications on object-level</li> <li>Implement useful functional logging system (inc. notifications, log on disk)</li> </ul> <p>January 2016</p> <ul> <li>Move usage of EMF model from server side to client side</li> </ul> <p>Februari 2016</p> <ul> <li>Proof of concept scalable database implementation (branch)</li> </ul> <p>Items to put on roadmap:</p> <ul> <li>Create HA ability (at least with 2 servers, 1 in standby)</li> </ul>"},{"location":"SOAP/","title":"SOAP","text":"<p>SOAP is one of the three available channels to access the methods of the Service Interfaces.</p> <p>This document describes how to use the SOAP interface of BIMserver 1.2</p> <p>External applications can interact with the BIMserver via SOAP (and [Interfaces other protocols]). For SOAP you'll need a WSDL file which describes all the methods/objects that are available. The BIMserver provides several interfaces and two versions of SOAP (1.1 and 1.2).</p> <p>soapversion can be either \"soap11\" or \"soap12\". protocol can be either \"http\" or \"https\". address can be an IP address or (sub)domain name. port can be omitted (80) or an integer.</p> <p>| URL | | protocol://address:port/soapversion/AdminInterface | | protocol://address:port/soapversion/AuthInterface | | protocol://address:port/soapversion/MetaInterface | | protocol://address:port/soapversion/PluginInterface | | protocol://address:port/soapversion/ServiceInterface | | protocol://address:port/soapversion/SettingsInterface | | protocol://address:port/soapversion/Bimsie1AuthInterface | | protocol://address:port/soapversion/Bimsie1LowLevelInterface | | protocol://address:port/soapversion/Bimsie1NotificationInterface | | protocol://address:port/soapversion/Bimsie1NotificationRegistryInterface | | protocol://address:port/soapversion/Bimsie1RemoteServiceInterface | | protocol://address:port/soapversion/Bimsie1ServiceInterface |</p> <p>Example WSDL URL: http://localhost:8080/soap12/ServiceInterface?wsdl</p>"},{"location":"SOAP/#soap-stack","title":"SOAP Stack","text":"<p>To use SOAP you will need to have a \"SOAP Stack\" for your programming language. A SOAP Stack is just a library containing all the logic for the SOAP protocol. For most programming languages there are multiple, so it's up to you to choose one.</p> <p>Your SOAP Stack is probably able to generate a bunch of code for your programming language based on a WSDL file/url, this is not required but makes your life a lot easier.</p>"},{"location":"SOAP/#authentication","title":"Authentication","text":"<p>The newest version of the BIMserver SOAP interface can handle two kinds of token passing.</p>"},{"location":"SOAP/#http-session-based","title":"HTTP Session Based","text":"<p>Make sure to enable session management in your client, otherwise the server won't be able to remember who you are and you will get this message: {{{ \"Authentication required for this call\" }}}</p> <p>For Apache CXF, you can enable sessions this way: {{{ ((javax.xml.ws.BindingProvider)port).getRequestContext().put(BindingProvider.SESSION_MAINTAIN_PROPERTY, true); }}}</p> <p>For .Net based clients, this can be done this way: {{{ client = new BiMserver.ServiceInterfaceService(); client.CookieContainer = new System.Net.CookieContainer(); }}}</p>"},{"location":"SOAP/#soap-header-based","title":"SOAP Header Based","text":"<p>Some clients won't be able to alter the HTTP Headers, so an alternative is to use the SOAP Header. The BIMserver supports both ways without any server side configuration.</p> <p>After you call login/autlogin, you will receive a token, this token must be included in all subsequent calls in the header. The SOAP message will have to look like this:</p> <pre><code>&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n    &lt;soap:Header&gt;\n        &lt;ns2:token xmlns:ns2=\"uri:org.bimserver.shared\"&gt;\n&lt;token&gt;70230BC83C052A3D1312FC516F9E3F5E&lt;/token&gt;\n        &lt;/ns2:token&gt;\n    &lt;/soap:Header&gt;\n    &lt;soap:Body&gt;\n        &lt;ns2:getAllUsers xmlns:ns2=\"http://shared.bimserver.org/\"\n            xmlns:ns3=\"uri:org.bimserver\" /&gt;\n    &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre> <p>To enable this kind of functionality in Apache CXF (Java)</p> <pre><code>    Token token = serviceInterface.getCurrentToken();\n    List&lt;Header&gt; headers = new ArrayList&lt;Header&gt;();\n    Header sessionHeader = new Header(new QName(\"uri:org.bimserver.shared\", \"token\"), token, new JAXBDataBinding(Token.class));\n    headers.add(sessionHeader);\n    ((BindingProvider) serviceInterface).getRequestContext().put(Header.HEADER_LIST, headers);\n</code></pre> <p>The [BimServerClientLib BimServerClientLib] has an option to switch between both ways. When connection with the method connectSoap, the second argument indicates weather to use the first (false) or second (true) method.</p>"},{"location":"SOAP/#generatedclient","title":"GeneratedClient","text":"<p>From version 1.1, there is a \"GeneratedSoapClient\" project in SVN. This project contains generated source code based on Apache CXF and the latest BIMserver \"ServiceInterface\". It's just a convenience project.</p>"},{"location":"SProject/","title":"SProject","text":"<p>To be written</p> <p>Alternative methods of getting hold of a project are</p> <pre><code>ServiceInterface.getProjectByPoid(poid);\nServiceInterface.getTopLevelProjectByName(name);\nServiceInterface.getAllProjects(Boolean onlyTopLevel, Boolean onlyActive);\nServiceInterface.getAllReadableProjects();\nServiceInterface.getAllWritableProjects();\n</code></pre>"},{"location":"SRevision/","title":"SRevision","text":"<p>This page describes a Revision from an API perspective. When using the API, all BIMserver objects are prefixed with an \"S\". So this object's name is \"SRevision\".</p> <p>Some of the most used fields of this object are:</p> <ul> <li>oid, This is a unique identifier for this object. This is what is also called an \"roid\" when referenced outside of the Revision context. Make sure to not mix this id up with the next field</li> <li>id, this is an incrementing integer, it starts at 1 for the first revision of a project, 2 for the second etc...</li> </ul> <p>The SRevision object is referred to from serveral other objects. It's referred from SProject 2 times:</p> <ul> <li>SProject.lastRevisionId, it is referring to SRevision.oid</li> <li>SProject.revisions, this is a list of Long, it is referring to SRevision.oid</li> </ul>"},{"location":"SSL-setup/","title":"SSL setup","text":"<p>When running as a normal user, prepend <code>sudo</code> to the commands where elevated permissions are needed.</p>"},{"location":"SSL-setup/#generate-the-ssl-certificate","title":"Generate the SSL Certificate","text":"<p>We will use Certbot  to create an SSL certificate. Certbot is a free, easy-to-use tool that works with Let's Encrypt, a widely trusted certificate authority, to issue the certificate.</p> <p>The domain <code>opensourcebim.org</code> is used as an example below. The certbot will use the domain name for directory names. Replace it with your domain name when executing the commands.</p> <pre><code>user@local:~$ man snap                           # check if snap is installed \nuser@local:~$ snap install --classic certbot     # install certbot\nuser@local:~$ certbot certonly --standalone      # generate SSL certificate (interactively enter required information)\nuser@local:~$ systemctl list-timers              # check automatic renewal\nuser@local:~$ chgrp tomcat /etc/letsencrypt/live/opensourcebim.org/privkey.pem  # own private key by group tomcat\nuser@local:~$ chmod g+r /etc/letsencrypt/live/opensourcebim.org/privkey.pem     # allow group to read private key\n</code></pre> <p>By default, read-access to the private key is restricted to root only which is not sufficient for Tomcat, as it does not allow for a dedicated startup phase with elevated permissions for sensible operations. Certbot picks up any modified permissions upon renewal.</p>"},{"location":"SSL-setup/#configuration","title":"Configuration","text":"<p>Configure SSL in <code>server.xml</code>:</p> <pre><code>&lt;Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n           maxThreads=\"150\" SSLEnabled=\"true\"\n           maxParameterCount=\"1000\"&gt;\n    &lt;SSLHostConfig&gt;\n        &lt;Certificate certificateKeyFile=\"/etc/letsencrypt/live/opensourcebim.org/privkey.pem\"\n                     certificateFile=\"/etc/letsencrypt/live/opensourcebim.org/cert.pem\"\n                     certificateChainFile=\"/etc/letsencrypt/live/opensourcebim.org/chain.pem\"\n                     type=\"EC\" /&gt;\n    &lt;/SSLHostConfig&gt; \n&lt;/Connector&gt; \n</code></pre> <p>Force redirection to SSL via configuration in <code>web.xml</code>:</p> <pre><code>&lt;security-constraint&gt;\n     &lt;web-resource-collection&gt;\n         &lt;web-resource-name&gt;Protected Context&lt;/web-resource-name&gt;\n         &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n     &lt;/web-resource-collection&gt;\n     &lt;user-data-constraint&gt;\n         &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;\n     &lt;/user-data-constraint&gt;\n&lt;/security-constraint&gt; \n</code></pre>"},{"location":"SSerializerPluginConfiguration/","title":"SSerializerPluginConfiguration","text":"<p>TO be written</p>"},{"location":"Scalability/","title":"Scalability","text":"<p>Lately a lot of questions have been asked about BIMserver's scalability. This document tries to explain the current situation and possible future implementations. A lot of what's written here is just my opinion.</p>"},{"location":"Scalability/#current-situation","title":"Current situation","text":"<p>BIMserver is deployed as either a WAR on an application server like Tomcat, or as a JAR. There is no real difference in the functionalities, it's just that one version contains the application server in the JAR, the other requires you to already have an application server deployed.</p> <p>BIMserver stores data on disk. To make sure this data can be retrieved in an efficient way, a database is used. A database is nothing more than a piece of code that makes it easier to write to/read from disk.</p> <p>A few notes - BIMserver can serve so called \"web modules\", static files (html, css, js). That functionality is only there to make development of plugins/BIMserver easier. In production those files should be served by a webserver that is good at serving static files like nginx. - BIMserver is not supposed to be connected to the internet directly. In production you'd have your users connect to your application server, which in turn connects to BIMserver. You can see BIMserver as a database specific for BIM. You wouldn't let your users connect directly to a MySQL database either.</p>"},{"location":"Scalability/#embedded-database","title":"Embedded database","text":"<p>Contrary to a lot of other server-applications, BIMserver uses an embedded database. This means the code for the database runs in the same JVM as BIMserver itself. In a lot of other cases this is a different (OS) process, running on the same or on another machine. As long as the database is running on the same machine as the application, it will be faster to run the database embedded in the same process. In this case there is no need for inter-process communication via either sockets/pipes etc...</p>"},{"location":"Scalability/#why-no-sql-orm","title":"Why no SQL / ORM","text":"<p>Most databases today use SQL as a language to query the database. SQL is very useful for data that is stored in a relational database. Those databases consist of tables, each table has a set of predefined columns. Records are the rows in the tables. The data BIMserver stores is structured in an object oriented way. For example, the leading data in BIMserver is modelled in the IFC model. The IFC model uses a lot of inheritance. Object models that use little inheritance can be mapped to the relational model. For IFC, this mapping proved not to be feasible.</p>"},{"location":"Scalability/#bdb","title":"BDB","text":"<p>So another type of database had to be selected to store the data in. BDB was chosen because it is reliable, fast and allows to use transactions. Also the datamodel and interface of BDB is very compact/simple, which would allow to switch to another database in the future.</p> <p>BDB can be seen as one big (Tree)Map. All keys are sorted. BIMserver converts all objects to byte[], those become the values. In BIMserver keys usually consist of several identifiers concatenated (project id, revision id, object id). BDB indexes the keys for fast retrieval. Any database that can replicate this behaviour can be relatively easily be used as a replacement database."},{"location":"Scalability/#in-depth-description-of-the-current-database-interface","title":"In-depth description of the current database interface","text":"<p>The interface between BIMserver and BDB is pretty slim, but there are some very important features that any such scalable database should have (in order to not have to rewrite huge parts of BIMserver): - The datamodel\u00a0can map variable length\u00a0byte[] keys to variable length byte[] values. In practice the keys are pretty small in BIMserver, but the values can be &gt; 100MB - The keys must always be sorted lexicographically - It must provide ACID transactions - It must provide cursors that allow you to iterate\u00a0over the sorted keys.</p>"},{"location":"Scalability/#why-scaling","title":"Why scaling","text":"<p>So far I haven't seen a whole lot of good reasons to make BIMserver scalable, please let me know.</p>"},{"location":"Scalability/#cpu","title":"CPU","text":"<p>About 99% percent of CPU is used by the plugin used to convert geometry from IFC's definition to triangles. Focus should be on scaling that out. BIMserver itself makes good use of the multiple cores if available. But there is of course a limit to this type of scaling (vertical).</p>"},{"location":"Scalability/#memory","title":"Memory","text":"<p>Memory usage has been greatly reduced in 1.5. Very big models (gigabytes) can be uploaded to a 64GB server, which you can buy for the price of a laptop.</p>"},{"location":"Scalability/#disk","title":"Disk","text":"<p>SSD disks are recommended, I'd like to see the first person using up all diskspace of a $200 SSD by using BIMserver.</p>"},{"location":"Scalability/#why-not-scaling","title":"Why not scaling","text":"<p>BIMserver is not a website. It does not have a gazillion users using it at the same time. If there is a BIMserver in the wild serving more than 10 concurrent users for parts of the day, I'd be surprised if they existed, but even more surprised if they had any performance problems.</p>"},{"location":"Scalability/#not-free","title":"Not free","text":"<p>Making software scalable is not free. For most databases, you'd have to switch to that database completely (meaning no BDB possible anymore). Most people will still run BIMserver on a single machine. Most probably a non-embeddable database would be used (probably not Java too), which would require all sorts of setup to even start testing.</p>"},{"location":"Scalability/#roadmap-use-of-recources","title":"Roadmap (use of recources)","text":"<p>I don't think the time is right to start using (programming) resources to work on scalability yet. There is no point in making software scalable when it's not neccesary.</p>"},{"location":"Scalability/#technical","title":"Technical","text":"<p>BDB is transactional. Transactions are hard in scalable databases. Most scalable databases are \"eventually consistent\", which requires a different way of programming, much harder than for a normal database (the application becomes responsible for figuring out discrepancies).</p>"},{"location":"Scalability/#other-ways-of-scaling-not-using-a-different-database","title":"Other ways of scaling (not using a different database)","text":""},{"location":"Scalability/#partition-by-project","title":"Partition by project","text":"<p>This would be simple to implement, it doesn't even require any changes to BIMserver. You can just run X instances of BIMserver, and depending on certain metrics decide on which server to create a new project. Your application could even be in charge of duplication by simply doing every action on multiple servers.</p>"},{"location":"Scalability/#fault-tolerancy-recovery","title":"Fault tolerancy / recovery","text":"<p>For this specific task BDB actually has the ability built-in. It would be interesting to see whether this can be used easily as non of the code accessing the database would have to change.</p>"},{"location":"Schema-Plugin/","title":"Schema Plugin","text":"<p>A schema plugin provides the BIMserver with information about a schema. There is currently only one implementation, and that one can read an express schema file (currently the Ifc2x3tc1.exp).</p> <pre><code>public interface SchemaPlugin extends Plugin {\n    SchemaDefinition getSchemaDefinition(PluginConfiguration pluginConfiguration);\n    File getExpressSchemaFile();\n}\n</code></pre>"},{"location":"Security/","title":"Java Virtual Machine (JVM) Security Manager","text":"<p>The Java Security Manager is a framework that controls the permission of Java applications. It is essential to run BIMserver in environments where security restrictions are required.</p> <p>Note: Tomcat does have support for running with the Java Security Manager, but historically, it hasn't been extensively tested in production environments with the Security Manager enabled. The Tomcat team has recognized that the Security Manager might lead to unexpected issues or require significant customization. As a result, enabling the Security Manager might lead to unexpected errors or behaviors. We recommend thorough testing in your environment.</p> <p>Below is the list of permissions that should be added to your security policy file to allow BIMserver to function correctly. The policy file should be updated as follows. Please let us know if things are missing or not required anymore:</p> <pre><code>grant { \n        // Read only file permissions on eclipse workspace, you wont need this on an application server\n        permission java.io.FilePermission \"..\", \"read\";\n        permission java.io.FilePermission \"../-\", \"read\";\n\n        // Read only file permissions on local git repository, you wont need this on an application server\n        permission java.io.FilePermission \"C:/Users/Ruben/git/-\", \"read\";\n\n        // Read/Write/Delete file permissions on home directory\n        permission java.io.FilePermission \"home/-\", \"read, write, delete\";\n\n        // Needed to catch all exceptions\n        permission java.lang.RuntimePermission \"setDefaultUncaughtExceptionHandler\";\n\n        // Permissions needed for OSGI (needed for Eclipse code that parses Java code to AST)\n        // TODO this sucks, eclipse its OSGI implementation is requesting all property permissions (read and write!!)\n        permission java.util.PropertyPermission \"*\", \"read, write\";\n\n        // Needed to suppress logging to sysout/syserr of IFC schema parser (which uses antlr)\n        permission java.lang.RuntimePermission \"setIO\";\n\n        // Allow the webserver to accept incoming connections on port 8080\n        permission java.net.SocketPermission \"*\", \"listen, accept, connect, resolve\";\n\n        // Needed for java reflection\n        permission java.lang.RuntimePermission \"accessClassInPackage.sun.reflect.generics.reflectiveObjects\";\n\n        // Needed for Jetty (Embedded Webserver)\n        permission java.lang.RuntimePermission \"setContextClassLoader\";\n\n        // Needed for BerkeleyDB\n        permission java.util.logging.LoggingPermission \"control\";\n        permission java.lang.management.ManagementPermission \"monitor\";\n\n        // Needed for JAXB serialization/deserialization, it sounds very broad, but its not really a security issue\n        permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n        permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n\n        // Needed by CXF (Web Services)\n        permission javax.xml.ws.WebServicePermission \"publishEndpoint\";\n\n        // Needed by EMF\n        permission java.lang.RuntimePermission \"getClassLoader\";\n        permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.org.apache.xerces.internal.parsers\";\n\n        // Needed for PluginManager\n        permission java.lang.RuntimePermission \"createClassLoader\";\n\n        // Permissions to read system properties\n        permission java.util.PropertyPermission \"java.version\", \"read\";\n        permission java.util.PropertyPermission \"java.vendor\", \"read\";\n        permission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n        permission java.util.PropertyPermission \"java.class.version\", \"read\";\n        permission java.util.PropertyPermission \"java.class.path\", \"read\";\n        permission java.util.PropertyPermission \"os.name\", \"read\";\n        permission java.util.PropertyPermission \"os.version\", \"read\";\n        permission java.util.PropertyPermission \"os.arch\", \"read\";\n        permission java.util.PropertyPermission \"file.separator\", \"read\";\n        permission java.util.PropertyPermission \"path.separator\", \"read\";\n        permission java.util.PropertyPermission \"line.separator\", \"read\";\n        permission java.util.PropertyPermission \"user.dir\", \"read\";\n\n        permission java.util.PropertyPermission \"java.specification.version\", \"read\";\n        permission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n        permission java.util.PropertyPermission \"java.specification.name\", \"read\";\n\n        permission java.util.PropertyPermission \"java.vm.specification.version\",\"read\";\n        permission java.util.PropertyPermission \"java.vm.specification.vendor\",\"read\";\n        permission java.util.PropertyPermission \"java.vm.specification.name\", \"read\";\n        permission java.util.PropertyPermission \"java.vm.version\", \"read\";\n        permission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n        permission java.util.PropertyPermission \"java.vm.name\", \"read\";\n};\n</code></pre>"},{"location":"Serializer-Deserializer-impl-matrix/","title":"Serializer Deserializer impl matrix","text":"IFC STEP IFC XML JSON Serialize V V V Serialize Streaming V - V Deserialize V V V Deserialize Streaming V - - <p>Legenda: * V: Supported * -: Not supported</p> <p>Goal:</p> IFC STEP IFC XML JSON Serialize V V V Serialize Streaming V V V Deserialize V V V Deserialize Streaming V V V"},{"location":"Serializer-Plugin/","title":"Serializer Plugin","text":"<p>A serializer serializes an object model to a stream of data. Among the default serializers are: IFC2x3, IfcXml, CityGML and others. Most serializers will output a textbased format but that is not required.</p> <p>Serializer plugins must implement SerializerPlugin interface.</p> <pre><code>public interface SerializerPlugin extends Plugin {\n    Serializer createSerializer(PluginConfiguration plugin);\n    Set&lt;Schema&gt; getSupportedSchemas();\n    String getOutputFormat(Schema schema);\n    Set&lt;String&gt; getRequiredGeometryFields();\n}\n</code></pre> <pre><code>public interface Serializer {\n    void init(IfcModelInterface model, ProjectInfo projectInfo, boolean normalizeOids) throws SerializerException;\n    void writeToOutputStream(OutputStream outputStream, ProgressReporter progressReporter) throws SerializerException;\n}\n</code></pre> <p>You can subclass EmfSerializer so you don't have to implement all methods.</p> <p>You can subclass AbstractGeometrySerializer if your serializer is going to need triangulated geometry.</p>"},{"location":"Service-Interfaces/","title":"Service interfaces","text":"<p>The <code>Service Interfaces</code> are a set of defined interfaces for interaction with BIMserver. These interfaces are defined as (heavily annotated) Java interfaces.</p> <p>In BIMserver 1.3/1.4 a lot of methods were moved to interfaces that are prefixed with <code>org.buildingsmart.bimsie1</code>. In BIMserver 1.5 those methods have been moved back to the original interfaces.</p>"},{"location":"Service-Interfaces/#the-interfaces","title":"The interfaces","text":"Namespace Name Link org.bimserver AdminInterface AdminInterface.java org.bimserver AuthInterface AuthInterface.java org.bimserver MetaInterface MetaInterface.java org.bimserver PluginInterface PluginInterface.java org.bimserver ServiceInterface ServiceInterface.java org.bimserver SettingsInterface SettingsInterface.java"},{"location":"Service-Interfaces/#access","title":"Access","text":"<p>Access to these methods is provided through 3 different channels: Protocol Buffers, SOAP and JSON.</p>"},{"location":"Service-Plugin/","title":"Service Plugin","text":"<p>Service plugins can extend the functionality of a BIMserver by listening to notifications and acting upon them. For example a ClashDetection Service plugin could create a ClashDetection report as [ExtendedData] when a user checks in a new revision.</p> <p>Have a look here for an easier implementation of services.</p>"},{"location":"Service-Plugin/#details","title":"Details","text":"<p>For this plugin you do not need implement any specific methods as long as you subclass [ServicePlugin]. You can register your services by calling the [register] method:</p> <pre><code>public void register(ServerDescriptor serverDescriptor, ServiceDescriptor serviceDescriptor, NotificationInterface notificationInterface) {\n}\n</code></pre> <p>It's best to register your services in the init method. You have to provide a [ServerDescriptor] and [ServiceDescriptor], here are examples for those:</p> <pre><code>ServerDescriptor serverDescriptor = StoreFactory.eINSTANCE.createServerDescriptor();\nserverDescriptor.setTitle(\"Clashdetection\");\n\nServiceDescriptor clashDetection = StoreFactory.eINSTANCE.createServiceDescriptor();\nclashDetection.setName(\"Clashdetection\");\nclashDetection.setDescription(\"Clashdetection\");\n        clashDetection.setNotificationProtocol(AccessMethod.INTERNAL);\nclashDetection.setReadRevision(true);\nclashDetection.setWriteExtendedData(true);\nclashDetection.setTrigger(Trigger.NEW_REVISION);\n</code></pre> <p>Example implementation code:</p> <pre><code>register(serverDescriptor, clashDetection, new NotificationInterfaceAdapter(){\n    @Override\n    public void newLogAction(SLogAction newRevisionNotification, SToken token, String apiUrl) throws UserException, ServerException {\n        ServiceInterface serviceInterface = getServiceInterface(token);\n        // Here goes your code\n    }\n}\n</code></pre> <p>Example:</p> <pre><code>public class DemoServicePlugin1 extends ServicePlugin {\n\n    private boolean initialized;\n\n    @Override\n    public void init(PluginManager pluginManager) throws PluginException {\n        super.init(pluginManager);\n        initialized = true;\n    }\n\n    @Override\n    public String getDescription() {\n        return \"Demo Service 1\";\n    }\n\n    @Override\n    public String getDefaultName() {\n        return \"Demo Service 1\";\n    }\n\n    @Override\n    public String getVersion() {\n        return \"1.0\";\n    }\n\n    @Override\n    public ObjectDefinition getSettingsDefinition() {\n        return null;\n    }\n\n    @Override\n    public boolean isInitialized() {\n        return initialized;\n    }\n\n    @Override\n    public String getTitle() {\n        return \"Demo Service 1\";\n    }\n\n    @Override\n    public void register(PluginConfiguration pluginConfiguration) {\n        ServiceDescriptor serviceDescriptor = StoreFactory.eINSTANCE.createServiceDescriptor();\n        serviceDescriptor.setProviderName(\"BIMserver\");\n        serviceDescriptor.setIdentifier(getClass().getName());\n        serviceDescriptor.setName(\"Demo Service 1\");\n        serviceDescriptor.setDescription(\"Demo Service 1\");\n        serviceDescriptor.setNotificationProtocol(AccessMethod.INTERNAL);\n        serviceDescriptor.setTrigger(Trigger.NEW_REVISION);\n        registerNewRevisionHandler(serviceDescriptor, new NewRevisionHandler() {\n            @Override\n            public void newRevision(BimServerClientInterface bimServerClientInterface, long poid, long roid, long soid, SObjectType settings) throws ServerException, UserException {\n                try {\n                    Date startDate = new Date();\n                    Long topicId = bimServerClientInterface.getRegistry().registerProgressOnRevisionTopic(SProgressTopicType.RUNNING_SERVICE, poid, roid, \"Running Demo Service\");\n                    for (int i=0; i&lt;100; i++) {\n                        SLongActionState state = new SLongActionState();\n                        state.setProgress(i);\n                        state.setTitle(\"Demo Service 1\");\n                        state.setState(SActionState.STARTED);\n                        state.setStart(startDate);\n                        bimServerClientInterface.getRegistry().updateProgressTopic(topicId, state);\n                        try {\n                            Thread.sleep(200);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    SLongActionState state = new SLongActionState();\n                    state.setProgress(100);\n                    state.setTitle(\"Demo Service 1\");\n                    state.setState(SActionState.FINISHED);\n                    state.setStart(startDate);\n                    state.setEnd(new Date());\n                    bimServerClientInterface.getRegistry().updateProgressTopic(topicId, state);\n\n                    bimServerClientInterface.getRegistry().unregisterProgressTopic(topicId);\n                } catch (PublicInterfaceNotFoundException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"Services-Notifications/","title":"Services/Notifications","text":"<p>BIMserver allows for extending the BIMserver functionalities by creating plugins. These plugins however are always running within a BIMserver and consequently must be written in Java. To allow for 3rd parties to write software in other languages and software running on other servers, the concept of services and notifications has been added.</p>"},{"location":"Services-Notifications/#notifications","title":"Notifications","text":"<p>Notifications are JSON messages being send to listening web servers. They will be sent on certain events, such as a user checking in a new revision or extendeddata being added to a project or revision.</p> <p>To be consistent, notifications are being sent just like normal BIMserver API calls. So for example the notification of a new revision looks like this:</p> <pre><code>{\n  request: {\n    interface: \"Bimsie1RemoteServiceInterface\",\n    method: \"newRevision\",\n    arguments: {\n        poid: 12345,\n        roid: 123,\n        serviceIdentifier: \"Furniture Placer\",\n        profileIdentifier: \"Furniture Placer\",\n        userToken: \"ABC\",\n        token: \"CDE\",\n        apiUrl: \"http://localhost:8080/json\"\n    }\n  }\n}\n</code></pre> <p>In this example, the poid and roid correspond to the project and new revision. The serviceIdentifier should be used to differentiate between different kinds of services being hosted by the same server. The profileIdentifier can be used to use specific settings. The userToken can be used to identify a certain user on the server the service is running on. The token and apiUrl are optional and can - if provided - allow a service to do API calls to the originating BIMserver. In typical cases the service will use these credentials to download the specific revision.</p>"},{"location":"Services-Notifications/#a-typical-workflow","title":"A typical workflow","text":"<ol> <li>A service must be provided somewhere. This means a webserver has to run, and JSON messages being posted must be processed correctly and according to the Bimsie1RemoteServiceInterface interface.</li> <li>The user calls ServiceInterface.addServiceToProject. The SService object is described [here]</li> <li>A user checks in a new revision</li> <li>The service will be triggered, a JSON message will be send to the address provided by the service provider</li> <li>The service will will usually download the revision from the originating BIMserver and do some things with it</li> </ol>"},{"location":"Services-Notifications/#bimsie1remoteserviceinterface","title":"Bimsie1RemoteServiceInterface","text":"<p>This interface contains all methods a service provider should implement.</p>"},{"location":"Services-Notifications/#getservice","title":"getService","text":"<p>This method provides the caller with information about a specific service. The fields:</p> Name Type Description name String The user-readable name of this service url String The URL to which the notifications should be send token String identifier String notificationProtocol SAccessMethod The protocol that should be used for notifications, should always be \"json\" description String A user-readable description of this service trigger STrigger What should trigger this service (can be NEW_REVISION, NEW_PROJECT or NEW_EXTENDED_DATA) readRevision boolean Whether this service requires reading the revision readExtendedData String An optional ExtendedDataSchema namespace this service requires reading writeRevision boolean Whether this service requires checking in a new revision writeExtendedData String An optional ExtendedDataSchema namespace for which this service needs to write data providerName String User-readable name of the provider of this service companyUrl String URL to company website tokenUrl String URL to page where a user can create a token (usually some kind of register page) newProfileUrl String URL to page where a user can create a new profile"},{"location":"Services-Notifications/#getprivateprofiles","title":"getPrivateProfiles","text":"<p>Arguments:</p> Name Type Description serviceIdentifier String Identifier of the service, should be unique per server token String A token the service provider can use to identify a certain user <p>Result:</p> <p>A List of SProfileDescriptor:</p> Name Type Description name String User-readable name of the profile description String Description of this profile publicProfile boolean Whether this profile is public (can be used without a token) identifier String An identifier for this profile"},{"location":"Services-Notifications/#getpublicprofiles","title":"getPublicProfiles","text":"<p>Arguments:</p> Name Type Description serviceIdentifier String Identifier of the service, should be unique per server <p>Result:</p> <p>A List of [SProfileDescriptor]</p>"},{"location":"Services-Notifications/#newrevision","title":"newRevision","text":"<p>Called when a new revision has been added.</p> Name Type Description poid long Project on which the new revision was added roid long Revision that has been created soid long User-specific identifier of the service on the BIMserver (can be used to gather settings) serviceIdentifier String Unique service identifier profileIdentifier String Unique profile identifier userToken String A token the service provider can use to identify a certain user token String Optional token that can be used to connect to the originating BIMserver (see apiUrl) apiUrl String URL of the API of the originating BIMserver"},{"location":"Services-Notifications/#newextendeddataonproject","title":"newExtendedDataOnProject","text":"<p>Called when new extended data has been added to a project</p> Name Type Description poid long Project on which the new extended data was added edid long Object ID of the extended data that has been added soid long User-specific identifier of the service on the BIMserver (can be used to gather settings) serviceIdentifier String Unique service identifier profileIdentifier String Unique profile identifier userToken String A token the service provider can use to identify a certain user token String Optional token that can be used to connect to the originating BIMserver (see apiUrl) apiUrl String URL of the API of the originating BIMserver"},{"location":"Services-Notifications/#newextendeddataonrevision","title":"newExtendedDataOnRevision","text":"<p>Called when new extended data has been added to a revision</p> Name Type Description poid long Project on which the new revision was added roid long Revision that has been created edid long Object ID of the extended data that has been added soid long User-specific identifier of the service on the BIMserver (can be used to gather settings) serviceIdentifier String Unique service identifier profileIdentifier String Unique profile identifier userToken String A token the service provider can use to identify a certain user token String Optional token that can be used to connect to the originating BIMserver (see apiUrl) apiUrl String URL of the API of the originating BIMserver"},{"location":"Services-Notifications/#libraries","title":"Libraries","text":"<p>To make working with notifications easier, we have developed extensions for the existing BIMserver libraries</p> Language URL Java https://github.com/opensourceBIM/BIMserver/tree/master/BimServerClientLib JavaScript https://github.com/opensourceBIM/BIMserver/blob/master/BimServer/www/js/bimserverapi.js PHP https://github.com/opensourceBIM/phpClientLib"},{"location":"Setup/","title":"Setup","text":"<p>BIMserver has different modes it can be in. One of the modes is \"NOT_SETUP\", in this case you will need to set it up in order to start using BIMserver.</p> <p>The default Web GUI of BIMserver will show the following page:</p> <p></p> <p>You can in theory setup a BIMserver by using API calls, but it's easier to use the Admin GUI. The Admin GUI is being bundled as a Web Module with most builds. You can access it on /apps/console. So for example: http://[YOUR DOMAIN]:[PORT]/[OPTIONAL CONTEXT PATH]/apps/console.</p> <p>The setup page looks like this:</p> <p></p> <p>A filled in setup page can look like this:</p> <p></p> <p>After setup, you will be able to login as an administator with the credentials you just entered.</p>"},{"location":"Streaming/","title":"Streaming","text":"<p>BIMserver 1.5 has undergone a few changes in order to reduce the amount of memory used during checkin and download.</p>"},{"location":"Streaming/#checkin","title":"Checkin","text":"<p>Basically before the checkin process looked like this: 1. User uploads IFC file, deserializer parses it and stores it in an EMF model, inverses are generated automatically by EMF. 2. Geometry is generated using a Render Engine, all the geometry (can be a lot, depending on the model) is also stored in the in-memory EMF model. 3. (Which starts after step 1 and 2 are fully completed) Store the content of the EMF model in the database</p> <p>Now it looks like this (when you select a \"Streaming\" deserializer, the old one is also still available) 1. User uploads IFC file, while it is uploading, it is also parsed on a line-by-line basis, each line is directly stored in the database and both the line (String) and object representing the IFC entity are removed from memory (well actually that happens on GC) before parsing the next line. 2. Special queries are run on the database to determine any inverses (the database stores inverses as well, to make traversal in that direction faster/easier), This only has to happen on a fraction of the model. 3. With some special queries, the geometry parts are queried and split into small groups of objects which are then serialized and sent to the Ifc Engine, the results are stored in the database as well. Only 10 elements are selected for each small IFC file, and the amount of IFC Render instances is never greater than the amount of cores in the machine. This step greatly improved the processing time on multi-core machines.</p> <p>You will still see the amount of memory increase quite quickly during checken, a large portion can be attributed to the fact that BerkeleyDB is quite the aggressive cacher.</p>"},{"location":"Streaming/#download","title":"Download","text":"<p>When downloading the same improvement has been made. Previously the complete model was loaded from the database into an EMF model, after that it would be serialized. Now this just happens in one go.</p>"},{"location":"Streaming/#example","title":"Example","text":"<p>This is when checking in a 280MB IFC file non-streaming. The blue area indicates the amount of memory being used within the JVM (green is the amount of memory the JVM uses from the system). The steep dropoffs are the GC taking place. Base memory at the peak is about 9GB. You can see the amount of memory gradually increasing as it's building up the EMF model.</p> <p></p> <p>Streaming HEAP usage. Note that the base memory never exceeds 2.5GB. Also note that it only takes 5 minutes instead of 11 minutes to checkin the IFC file. </p>"},{"location":"Terminology/","title":"Oid","text":"<p>All objects in the BIMserver have a unique identifier, this is called the oid (for object identifier). This oid is of type long. Instances from the Ifc2x3 model (like IfcWall) have oids, but also instances of the Store model (like Project, Revision, User) have an oid. With unique we mean unique within the instance of the BIMserver</p>"},{"location":"Terminology/#rid","title":"Rid","text":"<p>Rid stands for Revision Identifier. Every object in the BIMserver that has an oid also has a rid. Rids are of type int. For instances of the Store model the rid is also -1 because they are currently not versioned. For other objects (in the Ifc2x3 model) the rid is incremented with each new revision of the object.</p>"},{"location":"Terminology/#the-concreterevision-object","title":"The ConcreteRevision object","text":"<p>For every checkin, exactly 1 ConcreteRevision instance is created, this instance represents the actual checkin. But as you might have seen when you checkin a model on a subproject, revisions are also created on parent projects, that's where the Revision object comes into play. The ConcreteRevision object is the object that has the id attribute (not to be confused with oid), the id attribute is the same as the rid value for all objects comitted in that specific revision.</p>"},{"location":"Terminology/#the-revision-object","title":"The Revision object","text":"<p>For every checkin, at least one Revision object is created. Additional Revision object are created for all parent projects of the project the checkin was done on. Most of the time you will only have to use the Revision object.</p>"},{"location":"Tested-web-containers/","title":"Tested web containers","text":"<p>BIMserver 1.5.117 has been tested on: - Tomcat 8.0, 8.5 and 9.0 on Windows and is working fine - Tomcat 8.5 on Ubuntu linux and working fine</p> <p>Please let us know if you know a certain OS/container is either working or not working</p>"},{"location":"Tomcat-on-windows/","title":"Windows installation","text":"<p>This page will help you install and configure Tomcat on Windows, focusing more on common issues when running BIMserver on Tomcat. </p>"},{"location":"Tomcat-on-windows/#version-requirements","title":"Version Requirements","text":"<p>To run BIMserver on Tomcat, you need version 8 or higher. Versions 8.5 and 9 have been tested and recommended.</p>"},{"location":"Tomcat-on-windows/#steps-to-install-tomcats-on-windows","title":"Steps to install Tomcats on Windows","text":"<ul> <li>Download Tomcat: visit Tomcat download page.</li> <li>Choose the \"32-bit/64-bit Windows Service Installer\" under the core section.</li> <li>Download the installer file and follow the installation wizard steps. </li> </ul> <p>When prompted, select the option to install Tomcat as a service. This will make it easier to configure Tomcat to start automatically when your computer boots up. </p>"},{"location":"Tomcat-on-windows/#setting-the-amount-of-heap-memory","title":"Setting the amount of heap memory","text":"<p>On windows, tomcat installs this little icon in your system tray . Right-Click on the icon and select \"Configure...\". The following window will appear:</p> <p></p> <p>Open the Java tab and you can change the max amount of memory. Make sure you restart tomcat after changing anything. Also make sure you check whether the max amount of memory is actually correct (by going to the Tomcat admin page, or by using BIMvie.ws)</p>"},{"location":"UUIDs/","title":"UUIDs","text":"<p>Todo</p>"},{"location":"Visual-query-language/","title":"Visual query language","text":"<p>This page explains a visual query language. This will not necessarily become a real way of quering BIM models. For now it serves as tool to develop/explain a potential new query language.</p>"},{"location":"Visual-query-language/#building-blocks","title":"Building blocks","text":""},{"location":"Visual-query-language/#root","title":"Root","text":"<p>This is where the query \"starts\".</p> <p>Consideration: Remove the \"Root\" node, if you consider all the blocks with no input's as starting points, there is no need to have a \"Root\" node.</p> <p></p>"},{"location":"Visual-query-language/#type-query","title":"Type query","text":"<p>Query by type. By default all subtypes will be queried as well. You can disable the subtypes by adding \"No subtypes\"</p> <p></p>"},{"location":"Visual-query-language/#reference","title":"Reference","text":"<p>Follow a reference from the previous object. These can be single/multi references.</p> <p></p>"},{"location":"Visual-query-language/#conditions","title":"Conditions","text":"<p>The condition blocks (gray blocks) seem to use a text-based expression, this is just a simplification. The actual query model will represent these with more building blocks such as \"Equal\", \"Literal\" etc...</p> <p></p>"},{"location":"Visual-query-language/#reusable-query-blocks","title":"Reusable query blocks","text":"<p>Reuse a query block defined somewhere else. Possible properties</p> <ul> <li>Recurse (this will short-circuit the IN and OUT on the reusable code block), (default: false)</li> <li>Exclude, the objects will only be used to traverse the model, but not included in the result (default: false)</li> </ul> <p></p>"},{"location":"Visual-query-language/#examples","title":"Examples","text":""},{"location":"Visual-query-language/#query-a-list-of-guids","title":"Query a list of GUID's","text":"<p>Returns all IfcRoot (and subclasses) objects with the given GUID's (if they exist in the model). Of course these types of queries can also be done for \"Name\", \"ObjectID\" etc...</p> <p></p>"},{"location":"Visual-query-language/#query-multiple-types","title":"Query multiple types","text":"<p>Queries all doors/windows, plus their subtypes, if any.</p> <p></p>"},{"location":"Visual-query-language/#query-name-property","title":"Query name property","text":"<p>Get all walls with name \"Muur 1\".</p> <p></p>"},{"location":"Visual-query-language/#query-and-comparators","title":"Query AND + Comparators","text":"<p>This will return all IfcWall objects with a OverallWidth &gt; 2 AND OverallHeight &gt; 3</p> <p></p>"},{"location":"Visual-query-language/#query-not-null","title":"Query NOT + null","text":"<p>This will return all IfcWall objects that have a Representation. Could maybe also be visualized by adding an explicit NOT block.</p> <p></p>"},{"location":"Visual-query-language/#query-ifc-properties","title":"Query IFC properties","text":"<p>These are not direct object-properties, but properties that are attached to the object via IfcPropertySet/IfcPropertySingleValue etc...</p> <p>This functionality makes the query engine less schema-agnostic, another way of making it easier to query complex properties and also keep the query engine schema-less would be to use a reusable query block for it, for example the Properties block.</p> <p></p>"},{"location":"Visual-query-language/#query-object-with-certain-property-value-but-exclude-and-get-referenced","title":"Query object with certain property value, but exclude and get referenced","text":"<p>This query first selects all IfcBuildingStorey objects that have the name \"Storey 2\", which would usually be used to get one single storey (using a GUID here would be better). However this storey is not added to the resultset (note the \"exclude\" attribute). The Storey is only used as a path to get to the Window/Door objects that are linked to it.</p> <p>The Decomposes and Contains blocks are uses of reusable query blocks. These blocks will recurse through the decomposes and contains relations. The objects encountered on the way also excluded (in this case).</p> <p>Finally the IfcDoor and IfcWindow objects are selected, those are included in the results.</p> <p></p>"},{"location":"Web-socket-error/","title":"Web Sockets","text":"<p>When you are getting the \"websocket error\", this page helps you find the reason.</p> <p>Note, all versions of BIMserver &gt; 1.4 require tomcat version 8 (if you are using tomcat) because of a new implementation for websockets.</p> <p>The webbased user interface that is currently being shipped with BIMserver is BIMvie.ws. BIMvie.ws requires a working WebSocket implementation in your browser (actually the BimServerJavaScriptApi has this dependency, which is itself a dependency of BIMvie.ws). </p> <p>Usually when web sockets do not work, it's either one of the following:  - You are on a corporate network and the system administrators do not allow you to use Web Sockets (either intentionally or not)  - You are using a proxy server that does not support websockets (or websockets have not been allowed/configured) - You are using a very old browser (usually Internet Explorer). Internet Explorer is not supported, but newer versions tend to work anyways. - Your application container (Tomcat, Jetty or etc...) does not support web sockets, this should be in the log files.</p> <p>The web socket technology has been standardized in 2011.</p>"},{"location":"Wishlist-IfcOpenShell/","title":"IFC4 support","text":""},{"location":"Wishlist-IfcOpenShell/#generateacquire-geometry-for-specific-representation","title":"Generate/acquire geometry for specific representation","text":"<p>At the moment IfcOpenShell generates geometry per IfcProduct (from a BIMserver perspective). When for example an IfcWall is made from different materials (but not semantically modelled that way using assemblies), the different layers can have their own colors, but they won't be recognizable as different layers in the viewer.</p>"},{"location":"Wishlist-IfcOpenShell/#performance","title":"Performance","text":"<p>In order to have: - Low/manageable memory usage - Simultaneous Multi-core computation</p> <p>BIMserver now splits the original IFC file in smaller IFC files, data that is not relevant for geometry generation is omitted (for example property sets). This is now done on an IfcProduct level (usually 10 at-a-time). For objects that reuse geometry and that have</p>"},{"location":"Wishlist-IfcOpenShell/#speed","title":"Speed","text":""},{"location":"Writing-a-BimBot-service-for-BIMserver/","title":"Writing a BimBot service for BIMserver","text":"<p>Since version 1.5.88 any BIMserver instance is capable of running services on models that are not necessarily stored on that specific instance. This is utilizing the BimBot interface which is a lot leaner than the previous protocol for inter-BIMserver communication.</p> <p>The previous protocol basically only support sending/receiving notifications which contained the proper credentials to subsequently use the BIMserver API to query the model. Services could optionally attach extended data to a revision, but were not required to do so.</p> <p>The BimBots interface is a little more strict in the sense that it has a pre-defined input and output. For this reason, writing services in BIMserver that can be run as a BimBot is slightly different. Nontheless existing services can be easily retrofitted and that's what this page is about.</p>"},{"location":"Writing-a-BimBot-service-for-BIMserver/#bimbots-interface","title":"BimBots interface","text":"<p>Note, when talking about an interface on this page we mean an actual Java interface. The BimBots protocol itself however is language independent (see: external services).</p> <p>Note this interface is still subject to change.</p> <p>The main interface you have to implement is 'BimBotsServiceInterface'. There are currently 3 methods you should provide.</p>"},{"location":"Writing-a-BimBot-service-for-BIMserver/#getavailableinputs","title":"getAvailableInputs","text":"<pre><code>Set&lt;SchemaName&gt; getAvailableInputs();\n</code></pre> <p>This should return a list of SchemaName (enum) values that this service can interpret as an input. In most cases this will be either IFC_STEP_2X3TC1, IFC_STEP_4, IFC_XML_2X3TC1 or IFC_XML_4.</p>"},{"location":"Writing-a-BimBot-service-for-BIMserver/#getavailableoutputs","title":"getAvailableOutputs","text":"<pre><code>Set&lt;SchemaName&gt; getAvailableOutputs();\n</code></pre>"},{"location":"Writing-a-BimBot-service-for-BIMserver/#runbimbot","title":"runBimbot","text":"<pre><code>BimBotsOutput runBimBot(BimBotsInput input, SObjectType settings) throws BimBotsException;\n</code></pre> <p>This method is where the service is called. The input object will usually contain an already parsed ifc model (which you can get by calling <code>getIfcModel</code>).</p> <p>The result of this function should be of type BimBotsOutput, which should contain the actual data, the schema used and other info such as the ContentType.</p>"},{"location":"Writing-a-BimBot-service-for-BIMserver/#converting-an-existing-service","title":"Converting an existing service","text":"<p>Services that have been written earlier (for example subclasses of AbstractAddExtendedDataService or AbstractModifyRevisionService) should now subclass BimBotAbstractService.</p> <p>New services can also just implement BimBotsServiceInterface, but then the services won't be available as a service in the old style.</p> <p>Example: https://github.com/opensourceBIM/DemoPlugins/blob/master/DemoPlugins/src/org/bimserver/demoplugins/bimbotdemo/BimBotDemoService.java</p>"},{"location":"Writing-a-service%2C-the-easy-way/","title":"Writing a service","text":"<p>This page has a description how to write internal services, but as most internal services seem to either checkin an updated revision, or add extended data, some convenience classes have been written that make it a lot easier to write an internal service. This page describes how to use those classes.</p> <p>Make sure to create a plugin.xml</p>"},{"location":"Writing-a-service%2C-the-easy-way/#a-service-that-adds-extended-data","title":"A service that adds extended data","text":"<p>These services are triggered by a new revision, and add extended data to the revision.</p> <p>First subclass \"AbstractAddExtendedDataService\", which can be found in the package \"org.bimserver.plugins.services\" in the \"Shared\" project.</p> <ul> <li>Create a constructor and call the super constructor with 2 arguments, name and description.</li> <li>Implement newRevision</li> <li>(Optional) Implement getProgressType If you want to report progress-data, the default is UNKNOWN</li> <li>(Optional) Implement getSettingsDefinition to tell BIMserver you require certain user-defined settings</li> </ul> <p>Full code:</p> <pre><code>package org.bimserver.demoplugins.service;\n\nimport org.apache.commons.io.IOUtils;\nimport org.bimserver.interfaces.objects.SObjectType;\nimport org.bimserver.plugins.services.AbstractAddExtendedDataService;\nimport org.bimserver.plugins.services.BimServerClientInterface;\n\npublic class HtmlService extends AbstractAddExtendedDataService {\n        // A unique namespace, this is used by other software to determine the type of file you uploaded as extended data\n    private static final String NAMESPACE = \"htmldemo\";\n\n        // Constructor, make sure it is a no-arg constructor\n    public HtmlService() {\n                // Give a sensible name and description for the service\n        super(\"HTML Demo Service\", \"HTML Demo Service\", NAMESPACE);\n    }\n\n        // This is the method that gets called when there is a new revision, have a look at the [documentation](https://github.com/opensourceBIM/BIMserver/blob/master/Shared/src/org/bimserver/plugins/services/AbstractService.java#L92) for the details\n    @Override\n    public void newRevision(RunningService runningService, BimServerClientInterface bimServerClientInterface, long poid, long roid, String userToken, long soid, SObjectType settings) throws Exception {\n        byte[] bytes = IOUtils.toByteArray(getPluginContext().getResourceAsInputStream(\"data/example.html\"));\n        addExtendedData(bytes, \"example.html\", \"HTML Demo Results\", \"text/html\", bimServerClientInterface, roid, NAMESPACE);\n    }\n\n        // (Optional) Method to let BIMserver know whether you are going to provide progress-data, only required to implement if progress will be KNOWN\n    @Override\n    public ProgressType getProgressType() {\n        return ProgressType.KNOWN;\n    }\n}\n</code></pre>"},{"location":"Writing-a-service%2C-the-easy-way/#a-service-that-checks-in-a-new-revision","title":"A service that checks in a new revision","text":"<p>TODO</p>"},{"location":"Writing-a-service%2C-the-easy-way/#traversing-a-model","title":"Traversing a model","text":"<p>TODO</p>"},{"location":"XSLT-Serializer/","title":"XSLT Serializer","text":"<p>To make it easier to create serializer plugins for the BIMserver, you can also define the serialization logic in an XSLT which takes an IFCXML file as the source file.</p>"},{"location":"XSLT-Serializer/#creating-the-plugin","title":"Creating the plugin","text":"<p>Note: Is is usually a lot easier to start from existing code, have a look at the \"Cobie2Serializer\" project for example.</p> <ul> <li>Follow the Plugin Development page</li> <li>Add a dependancy to the \"XsltSerializer\" project</li> <li>Create an xslt file in the plugin-project's root</li> <li>Change the \"TestPlugin\" file:</li> </ul> <pre><code>    private boolean initialized;\n    private URL url;\n\n    @Override\n    public void init(PluginManager pluginManager) throws PluginException {\n        url = pluginManager.getPluginContext(this).getResourceAsUrl(\"[NAME OF YOUR XSLT FILE]\");\n        initialized = true;\n    }\n\n    @Override\n    public String getName() {\n        return getClass().getName();\n    }\n\n    @Override\n    public String getDescription() {\n        return \"Cobie2\";\n    }\n\n    @Override\n    public String getVersion() {\n        return \"1.0\";\n    }\n\n    @Override\n    public boolean isInitialized() {\n        return initialized;\n    }\n\n    @Override\n    public Set&lt;Class&lt;? extends Plugin&gt;&gt; getRequiredPlugins() {\n        return null;\n    }\n\n    @Override\n    public EmfSerializer createSerializer() {\n        XsltSerializer xsltSerializer = new XsltSerializer();\n        xsltSerializer.setXsltUrl(url);\n        return xsltSerializer;\n    }\n\n    @Override\n    public String getDefaultSerializerName() {\n        return \"[NAME OF YOUR SERIALIZER]\";\n    }\n\n    @Override\n    public String getDefaultExtension() {\n        return \"[EXTENSION OF YOU XSLT TARGET FORMAT]\";\n    }\n\n    @Override\n    public String getDefaultContentType() {\n        return \"[CONTENT TYPE OF YOUR XSLT TARGET FORMAT]\";\n    }\n</code></pre> <p>Example project structure: http://bimserver.googlecode.com/svn/wiki/images/cobieproject.png</p>"},{"location":"XSLT-Serializer/#adding-xslt-parameters","title":"Adding XSLT parameters","text":"<p>You can pass parameters to the XSLT engine the following way. You have to add this code to the init method.</p> <pre><code>    xsltSerializer.addParameter(new XsltParameter(\"topic\", \"component\"));\n</code></pre>"},{"location":"_Sidebar/","title":"Sidebar","text":"<p>Get Started</p> <ul> <li>Quick Guide</li> <li>Requirements Version 1.2</li> <li>Requirements Version 1.3</li> <li>Requirements Version 1.4</li> <li>Requirements Version 1.4 &gt; 2015-09-12</li> <li>Requirements Version 1.5</li> <li>Download</li> <li>JAR Starter</li> <li>Setup</li> </ul> <p>Deployment</p> <ul> <li>Ubuntu installation</li> <li>Windows installation</li> <li>Security</li> <li>Memory Usage</li> <li>More memory</li> <li>Performance statistics</li> <li>Large databases</li> </ul> <p>Developers</p> <ul> <li>Service Interfaces</li> <li>SOAP</li> <li>JSON</li> <li>Protocol Buffers</li> <li>Common functions</li> <li>Checkin</li> <li>Download</li> <li>Data Model</li> <li>SProject</li> <li>SRevision</li> <li>Low Level Calls</li> <li>Endpoints</li> </ul> <p>Clients</p> <ul> <li>Java Client</li> <li>Java Client (Maven)</li> <li>PHP Client</li> <li>JavaScript Client</li> </ul> <p>BIMServer Developers</p> <ul> <li>Plugins in 1.5</li> <li>Plugin Development</li> <li>Serializer Plugin<ul> <li>XSLT Serializer</li> <li>BIMsurfer Serializers</li> </ul> </li> <li>Deserializer Plugin</li> <li>Model Compare Plugin</li> <li>Model Merge Plugin</li> <li>Query Engine Plugin</li> <li>Render Engine Plugin</li> <li>ObjectIDM Plugin</li> <li>Schema Plugin</li> <li>Service Plugin</li> <li>Eclipse</li> <li>Eclipse Modeling Framework</li> <li>Embedding</li> <li>Terminology</li> <li>Database/Versioning</li> <li>IFC STEP Encoding</li> <li>Communication</li> <li>Global changes in 1.5</li> <li>Writing a service</li> <li>Services/Notifications</li> <li>BIMserver 1.5 Developers</li> <li>Extended data</li> <li>Extended data schema</li> <li>Object IDM</li> </ul> <p>New developments</p> <ul> <li>New remote service interface</li> <li>Plugins new</li> <li>Deprecated</li> <li>New query language</li> <li>Visual query language</li> <li>Contains</li> <li>Decomposes</li> <li>DecomposesContains</li> <li>Properties</li> <li>Reusable</li> <li>Reorganizing BIMserver JavaScript API</li> </ul> <p>General</p> <ul> <li>FAQ</li> <li>Known Issues</li> <li>Problems querying IFC</li> <li>Web Sockets</li> <li>License</li> <li>Feature statusses</li> <li>Roadmap</li> </ul>"}]}